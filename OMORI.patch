Only in b/www/js: bundle.js
Only in b/www/js/libs: fpsmeter.js.map
Only in b/www/js/libs: iphone-inline-video.browser.js.map
Only in b/www/js/libs: lz-string.js.map
diff '--color=auto' -crbB "a/www/js/plugins/Atlas Loader.js" "b/www/js/plugins/Atlas Loader.js"
*** "a/www/js/plugins/Atlas Loader.js"	2024-07-28 22:36:58.446267226 -0500
--- "b/www/js/plugins/Atlas Loader.js"	2024-07-21 09:52:11.240749850 -0500
***************
*** 16,22 ****
   */
  //=============================================================================
  
! 
  
  //=============================================================================
  // ** SceneManager
--- 16,27 ----
   */
  //=============================================================================
  
! function readFileSync(filename, options = {}) {
!   let result = new XMLHttpRequest;
!   result.open("GET", filename, false);
!   result.send();
!   return result.responseText;
! }
  
  //=============================================================================
  // ** SceneManager
***************
*** 75,90 ****
    if (window['$atlasData'] === undefined) {
      var path = require('path');
      var fs = require('fs');
!     var yaml = require('./js/libs/js-yaml-master')
!     var base = path.dirname(process.mainModule.filename);
      // Get Folder
      var folder = '/img/atlases/';
      // Get FilePath
      var filePath = base + folder;
      // Get Directory List
!     var dirList = fs.readdirSync(filePath);
      // Get Atlas File
!     var data = yaml.safeLoad(fs.readFileSync(base + '/data/Atlas.yaml', 'utf8'));
      // Set Atlas Data
      window['$atlasData'] = data;
    };
--- 80,95 ----
    if (window['$atlasData'] === undefined) {
      var path = require('path');
      var fs = require('fs');
!     var yaml = require("yaml")
!     var base = window.location.origin;
      // Get Folder
      var folder = '/img/atlases/';
      // Get FilePath
      var filePath = base + folder;
      // Get Directory List
!     //var dirList = fs.readdirSync(filePath);
      // Get Atlas File
!     var data = yaml.safeLoad(readFileSync(base + '/data/Atlas.yaml'));
      // Set Atlas Data
      window['$atlasData'] = data;
    };
***************
*** 205,218 ****
  AtlasManager.loadAllAtlasImages = function() {
    var path = require('path');
    var fs = require('fs');
!   var yaml = require('./js/libs/js-yaml-master')
!   var base = path.dirname(process.mainModule.filename);
    // Get Folder
    var folder = '/img/atlases/';
    // Get FilePath
    var filePath = base + folder;
    // Get Directory List
!   var dirList = fs.readdirSync(filePath);
    // // If Atlas is undefined
    // if (window['$atlasData'] === undefined) {
    //   // Get Atlas File
--- 210,223 ----
  AtlasManager.loadAllAtlasImages = function() {
    var path = require('path');
    var fs = require('fs');
!   var yaml = require("yaml")
!   var base = window.location.origin;
    // Get Folder
    var folder = '/img/atlases/';
    // Get FilePath
    var filePath = base + folder;
    // Get Directory List
!   var dirList = JSON.parse(readFileSync(filePath + "list.yaml").toString())["files"];
    // // If Atlas is undefined
    // if (window['$atlasData'] === undefined) {
    //   // Get Atlas File
***************
*** 222,237 ****
    // };
    // Go Through Directory
    for (var i = 0; i < dirList.length; i++) {
!     // Get Directory
!     var directory = dirList[i];
!     // Get Format
!     var format = path.extname(dirList[i]);
!     // Get Filename
!     var filename = path.basename(directory, format);
      // If an image
!     if (format === '.png') {
        // Load Atlas
!       ImageManager.loadAtlas(filename)
      };
    };
  };
--- 227,242 ----
    // };
    // Go Through Directory
    for (var i = 0; i < dirList.length; i++) {
!     var index = dirList[i];
!     var isFolder = (index["type"] === "folder");
!     var name = index["name"]
!     if (isFolder) {
!       continue;
!     }
      // If an image
!     if (name.endsWith(".png")) {
        // Load Atlas
!       ImageManager.loadAtlas(name.replace(".png", ""));
      };
    };
  };
diff '--color=auto' -crbB "a/www/js/plugins/Battle Commands List.js" "b/www/js/plugins/Battle Commands List.js"
*** "a/www/js/plugins/Battle Commands List.js"	2024-07-28 22:36:58.449600584 -0500
--- "b/www/js/plugins/Battle Commands List.js"	2024-07-24 22:53:24.880545522 -0500
***************
*** 214,223 ****
  // * Initialize Actor Battle Commands List
  //=============================================================================
  Game_Actor.prototype.initBattleCommandsList = function() { 
    // Get Actor & Current Class
    var actor = this.actor(), currentClass = this.currentClass();
    // Find Corrent Battle Command List
!   if (actor.meta.BattleCommandsList) {
      // Set Battle Command List
      this._battleCommandsList = actor.meta.BattleCommandsList.clone();
    } else if (currentClass.meta.BattleCommandsList) {
--- 214,224 ----
  // * Initialize Actor Battle Commands List
  //=============================================================================
  Game_Actor.prototype.initBattleCommandsList = function() { 
+   //debugger
    // Get Actor & Current Class
    var actor = this.actor(), currentClass = this.currentClass();
    // Find Corrent Battle Command List
!   if (Array.isArray(actor.meta.BattleCommandsList)) {
      // Set Battle Command List
      this._battleCommandsList = actor.meta.BattleCommandsList.clone();
    } else if (currentClass.meta.BattleCommandsList) {
diff '--color=auto' -crbB "a/www/js/plugins/External Notes.js" "b/www/js/plugins/External Notes.js"
*** "a/www/js/plugins/External Notes.js"	2024-07-28 22:36:58.436267150 -0500
--- "b/www/js/plugins/External Notes.js"	2024-07-21 09:15:15.440373566 -0500
***************
*** 7,12 ****
--- 7,20 ----
  var Imported = Imported || {} ; Imported.TDS_ExternalNotes = true;
  // Initialize Alias Object
  var _TDS_ = _TDS_ || {} ; _TDS_.ExternalNotes = _TDS_.ExternalNotes || {};
+ 
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest;
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  //=============================================================================
   /*:
   * @plugindesc
***************
*** 54,65 ****
  DataManager.loadDatabase = function() {
    var path = require('path');
    var fs = require('fs');
!   var yaml = require('./js/libs/js-yaml-master')    
!   var base = path.dirname(process.mainModule.filename);
    // If External Notes Data is undefined
    if (window['$externalNotesData'] === undefined) { 
      // Get Atlas File
!     window['$externalNotesData'] = yaml.safeLoad(fs.readFileSync(base + '/data/Notes.yaml', 'utf8'));    
    };
    // Run Original Function
    _TDS_.ExternalNotes.DataManager_loadDatabase.call(this);
--- 62,73 ----
  DataManager.loadDatabase = function() {
    var path = require('path');
    var fs = require('fs');
!   var yaml = require('yaml')    
!   var base = window.location.origin;
    // If External Notes Data is undefined
    if (window['$externalNotesData'] === undefined) { 
      // Get Atlas File
!     window['$externalNotesData'] = yaml.safeLoad(readFileSync(base + '/data/Notes.yaml'));    
    };
    // Run Original Function
    _TDS_.ExternalNotes.DataManager_loadDatabase.call(this);
diff '--color=auto' -crbB a/www/js/plugins/GALV_CamControl.js b/www/js/plugins/GALV_CamControl.js
*** a/www/js/plugins/GALV_CamControl.js	2024-07-28 22:36:58.429600433 -0500
--- b/www/js/plugins/GALV_CamControl.js	2024-07-23 11:58:20.330799345 -0500
***************
*** 121,128 ****
  };
  
  // Direct to Plugin Object
! Galv.pCmd.CAM = function(arguments) {
! 	Galv.CC.camControl(arguments);
  };
  // END GALV'S PLUGIN MANAGEMENT
  
--- 121,128 ----
  };
  
  // Direct to Plugin Object
! Galv.pCmd.CAM = function(args) {
! 	Galv.CC.camControl(args);
  };
  // END GALV'S PLUGIN MANAGEMENT
  
diff '--color=auto' -crbB a/www/js/plugins/GALV_MoveRouteExtras.js b/www/js/plugins/GALV_MoveRouteExtras.js
*** a/www/js/plugins/GALV_MoveRouteExtras.js	2024-07-28 22:36:58.452933942 -0500
--- b/www/js/plugins/GALV_MoveRouteExtras.js	2024-07-23 11:59:06.921125478 -0500
***************
*** 194,211 ****
  
  
  // GET MR CHARACTER
! Galv.MRE.getMrChar = function(arguments) {
  	var char = null;
! 	if (arguments.length > 1) {
  		// Move toward x,y
! 		char = { x : arguments[0], y : arguments[1]	};
! 	} else if (arguments.length === 1) {
! 		if (arguments[0] === 0) {
  			// Is player
  			char = $gamePlayer;
  		} else {
  			// Is event
! 			char = $gameMap._events[arguments[0]];
  		};
  	};
  	return char;
--- 194,211 ----
  
  
  // GET MR CHARACTER
! Galv.MRE.getMrChar = function(args) {
  	var char = null;
! 	if (args.length > 1) {
  		// Move toward x,y
! 		char = { x : args[0], y : args[1]	};
! 	} else if (args.length === 1) {
! 		if (args[0] === 0) {
  			// Is player
  			char = $gamePlayer;
  		} else {
  			// Is event
! 			char = $gameMap._events[args[0]];
  		};
  	};
  	return char;
diff '--color=auto' -crbB a/www/js/plugins/GTP_CoreUpdates.js b/www/js/plugins/GTP_CoreUpdates.js
*** a/www/js/plugins/GTP_CoreUpdates.js	2024-07-28 22:36:58.422933717 -0500
--- b/www/js/plugins/GTP_CoreUpdates.js	2024-07-18 23:45:12.211275278 -0500
***************
*** 195,201 ****
  	Encryption = class {
  
      static init() {
!       this._key = String(window.nw.App.argv).replace("--", "");
      }
  
  		static isTest() {
--- 195,201 ----
  	Encryption = class {
  
      static init() {
!       this._key = "6bdb2e585882fbd48826ef9cffd4c511";
      }
  
  		static isTest() {
diff '--color=auto' -crbB a/www/js/plugins/GTP_OmoriFixes.js b/www/js/plugins/GTP_OmoriFixes.js
*** a/www/js/plugins/GTP_OmoriFixes.js	2024-07-28 22:36:58.452933942 -0500
--- b/www/js/plugins/GTP_OmoriFixes.js	2024-07-25 14:37:29.440643549 -0500
***************
*** 3,8 ****
--- 3,18 ----
  // GTP_OmoriFixes.js    VERSION 3.5.1
  //=============================================================================
  
+ function readFileSync(filename, options = {}) {
+     let result = new XMLHttpRequest;
+ 	if (filename.endsWith(".yaml")) {
+ 		result.overrideMimeType("text/yaml");
+ 	}
+     result.open("GET", filename, false);
+     result.send();
+     return result.responseText;
+ }
+ 
  var Imported = Imported || {};
  Imported.GTP_OmoriFixes = true;
  
***************
*** 158,175 ****
  
  	const _old_yanfly_updateResolution = Yanfly.updateResolution;
  	Yanfly.updateResolution = function() {
! 		const os = require("os");
  		if(os.platform() !== "darwin") {return _old_yanfly_updateResolution.call(this);}
  		const nw = require("nw.gui");
  		const nw_window = nw.Window.get();
  		let resizeWidth = Yanfly.Param.ScreenWidth - window.innerWidth;
  		let resizeHeight = Yanfly.Param.ScreenHeight - window.innerHeight;
  		nw_window.moveBy(-1 * Math.ceil(resizeWidth/2), -1 * Math.ceil(resizeHeight/2));
! 		nw_window.resizeBy(resizeWidth, resizeHeight);
! 
  	}
  
  	Yanfly.moveToCenter = function() {
  		// Get Window X & Y Coordinates
  		var x = (window.screen.width - Yanfly.Param.ScreenWidth) / 2
  		var y = (window.screen.height - Yanfly.Param.ScreenHeight) / 2
--- 168,185 ----
  
  	const _old_yanfly_updateResolution = Yanfly.updateResolution;
  	Yanfly.updateResolution = function() {
! 		/*const os = require("os");
  		if(os.platform() !== "darwin") {return _old_yanfly_updateResolution.call(this);}
  		const nw = require("nw.gui");
  		const nw_window = nw.Window.get();
  		let resizeWidth = Yanfly.Param.ScreenWidth - window.innerWidth;
  		let resizeHeight = Yanfly.Param.ScreenHeight - window.innerHeight;
  		nw_window.moveBy(-1 * Math.ceil(resizeWidth/2), -1 * Math.ceil(resizeHeight/2));
! 		nw_window.resizeBy(resizeWidth, resizeHeight);*/
  	}
  
  	Yanfly.moveToCenter = function() {
+ 		/*
  		// Get Window X & Y Coordinates
  		var x = (window.screen.width - Yanfly.Param.ScreenWidth) / 2
  		var y = (window.screen.height - Yanfly.Param.ScreenHeight) / 2
***************
*** 182,202 ****
  			const nw = require("nw.gui");
  			const nw_window = nw.Window.get();
  			nw_window.moveTo(x,y)
! 		}
  	}
  
  	$.Shake_Method = function() {
! 		if(Utils.isMac()) {
  			const nw = require("nw.gui");
  			const nw_window = nw.Window.get();
  			nw_window.moveTo($.store_coordinates[0] + Math.round(8*Math.random()), $.store_coordinates[1] + Math.round(8*Math.random()));
  		}
  		else {
  			window.moveTo($.store_coordinates[0] + (8*Math.random()), $.store_coordinates[1] + (8*Math.random()));
! 		}
  	}
  
  	$.Window_Shake = function(remove) {
  		if(!Graphics._isFullScreen()) {return false;}
  		if(!!remove) {
  			SceneManager.ticker.remove(this.Shake_Method, this);
--- 192,213 ----
  			const nw = require("nw.gui");
  			const nw_window = nw.Window.get();
  			nw_window.moveTo(x,y)
! 		}*/
  	}
  
  	$.Shake_Method = function() {
! 		/*if(Utils.isMac()) {
  			const nw = require("nw.gui");
  			const nw_window = nw.Window.get();
  			nw_window.moveTo($.store_coordinates[0] + Math.round(8*Math.random()), $.store_coordinates[1] + Math.round(8*Math.random()));
  		}
  		else {
  			window.moveTo($.store_coordinates[0] + (8*Math.random()), $.store_coordinates[1] + (8*Math.random()));
! 		}*/
  	}
  
  	$.Window_Shake = function(remove) {
+ 		return false;
  		if(!Graphics._isFullScreen()) {return false;}
  		if(!!remove) {
  			SceneManager.ticker.remove(this.Shake_Method, this);
***************
*** 367,373 ****
  		start() {
  			super.start();
  			this.determineOS();
! 			if(!!this.hasSteamwork()) {
  				this.getAchievementsData();
  			}
  			else if(!this.hasSteamwork() && !Utils.isOptionValid("test")) {
--- 378,384 ----
  		start() {
  			super.start();
  			this.determineOS();
! 			/*if(!!this.hasSteamwork()) {
  				this.getAchievementsData();
  			}
  			else if(!this.hasSteamwork() && !Utils.isOptionValid("test")) {
***************
*** 385,391 ****
  					Yanfly.moveToCenter();
  				})
  			}
! 			this.initNWScreen();
  		}
  
  		hasSteamwork() {
--- 396,402 ----
  					Yanfly.moveToCenter();
  				})
  			}
! 			this.initNWScreen();*/
  		}
  
  		hasSteamwork() {
***************
*** 410,416 ****
  		}
  		
  		initNWScreen() {
! 			const nw = require("nw.gui");
  			nw.Screen.Init();
  			nw.Screen.on('displayAdded', () => {
  				setTimeout(() => {
--- 421,427 ----
  		}
  		
  		initNWScreen() {
! 			/*const nw = require("nw.gui");
  			nw.Screen.Init();
  			nw.Screen.on('displayAdded', () => {
  				setTimeout(() => {
***************
*** 430,436 ****
  					Yanfly.updateResolution();
  					Yanfly.moveToCenter();
  				}, 100)
! 			});
  		}
  	}
  
--- 441,447 ----
  					Yanfly.updateResolution();
  					Yanfly.moveToCenter();
  				}, 100)
! 			});*/
  		}
  	}
  
***************
*** 974,1000 ****
  		}
  
  		static _isFullScreen() {
! 			const os = require("os");
! 			if(os.platform() !== "darwin") {return super._isFullScreen();}
! 			const nw = require("nw.gui");
! 			const nw_window = nw.Window.get();
! 			return !nw_window.isFullscreen;			
  		}
  
  		static _requestFullScreen() {
! 			const os = require("os");
! 			if(os.platform() !== "darwin") {return super._requestFullScreen();}
! 			const nw = require("nw.gui");
! 			const nw_window = nw.Window.get();
! 			return nw_window.enterFullscreen();			
  		}
  
  		static _cancelFullScreen() {
! 			const os = require("os");
! 			if(os.platform() !== "darwin") {return super._cancelFullScreen();}
! 			const nw = require("nw.gui");
! 			const nw_window = nw.Window.get();
! 			nw_window.leaveFullscreen();	
  		}
  
  		static _paintUpperCanvas() {
--- 985,1016 ----
  		}
  
  		static _isFullScreen() {
! 			return (!window.screenTop && !window.screenY);		
  		}
  
  		static _requestFullScreen() {
! 			// thank you w3schools
! 			try {
! 				let elem = document.documentElement;
! 				if (elem.requestFullscreen) {
! 					elem.requestFullscreen();
! 				} else if (elem.webkitRequestFullscreen) { /* Safari */
! 					elem.webkitRequestFullscreen();
! 				} else if (elem.msRequestFullscreen) { /* IE11 */
! 					elem.msRequestFullscreen();
! 				}
! 			} catch {}
  		}
  
  		static _cancelFullScreen() {
! 			// thank you w3schools
! 			if (document.exitFullscreen) {
! 				document.exitFullscreen();
! 			} else if (document.webkitExitFullscreen) { /* Safari */
! 				document.webkitExitFullscreen();
! 			} else if (document.msExitFullscreen) { /* IE11 */
! 				document.msExitFullscreen();
! 			}
  		}
  
  		static _paintUpperCanvas() {
***************
*** 1237,1243 ****
  				this.ticker.add(this.update, this); 
  				this.ticker.start();
  				// Make On Minimize Event
! 				const nw = require("nw.gui");
  				const win = nw.Window.get();
  				const os = require("os");
  				win.on("minimize", () => {
--- 1253,1259 ----
  				this.ticker.add(this.update, this); 
  				this.ticker.start();
  				// Make On Minimize Event
! 				/*const nw = require("nw.gui");
  				const win = nw.Window.get();
  				const os = require("os");
  				win.on("minimize", () => {
***************
*** 1256,1262 ****
  						}, 25)
  					})					
  				}
! 				win.on("restore", () => {this._clearMinimizeHandler()})
  				return;
  			}
  			else {
--- 1272,1278 ----
  						}, 25)
  					})					
  				}
! 				win.on("restore", () => {this._clearMinimizeHandler()})*/
  				return;
  			}
  			else {
***************
*** 2434,2440 ****
  		const path = require("path");
  		const fs = require("fs")
  		const os = require("os");
! 		var base = path.dirname(process.mainModule.filename);
  		var deskDir = `${base}`;
  		fs.writeFileSync(deskDir + `___for_${$gameActors.actor(8).name()}___.txt`, `............. ...   ............................... ..... ............. ..... ..
  		...........           .    ..       .   . .. ...    .  ..     .. ...    .  ..   
--- 2450,2456 ----
  		const path = require("path");
  		const fs = require("fs")
  		const os = require("os");
! 		var base = window.location.origin;
  		var deskDir = `${base}`;
  		fs.writeFileSync(deskDir + `___for_${$gameActors.actor(8).name()}___.txt`, `............. ...   ............................... ..... ............. ..... ..
  		...........           .    ..       .   . .. ...    .  ..     .. ...    .  ..   
***************
*** 2694,2747 ****
  
  	Permanent_Manager = class {
  
- 		static dataFolder() {
- 			const pp = require("path");
- 			const os = require("os");
- 			let folder = process.env.LOCALAPPDATA;
- 			if(os.platform() === "darwin") {
- 				folder = pp.join(process.env.HOME, "Library/Preferences/")
- 			}
- 			return folder;
- 		}
- 
- 		static determineOmoriFolder() {
- 			const os = require("os");
- 			let folder = "OMORI/";
- 			if(os.platform() === "darwin") {
- 				folder = "com.omocat.omori/"
- 			}
- 			return folder;			
- 		}
- 
  		static load() {
- 			const pp = require("path");
- 			const fs = require("fs");
- 			const data_folder = this.dataFolder();
- 			const folder = pp.join(data_folder, this.determineOmoriFolder());
  			this._cutsceneData = {};
! 			fs.readFile(folder + "CUTSCENE.json", (err, data) => {
! 				if(!!err) {throw new Error(err)}
! 				if(!data) {return this._cutsceneData = {};}
! 				this._cutsceneData = JSON.parse(data);
! 			})
  		}
  
  		static save() {
- 			const pp = require("path");
- 			const fs = require("fs");
- 			const data_folder = this.dataFolder();
- 			const omori_folder = this.determineOmoriFolder();
- 			const folder = pp.join(data_folder, omori_folder);
- 			fs.stat(folder, (err, stat) => {
- 				if(!stat || !!err) {fs.mkdirSync(folder);}
  				let data = JSON.stringify(this._cutsceneData);
! 				fs.writeFile(folder + "CUTSCENE.json", data, err => {
! 					if(!!err) {
! 						console.error("An error has occured during permanent data saving process!");
! 						throw new Error(err);
! 					}
! 				})	
! 			})			
  		}
  
  		static isCutsceneSkippable(key) {
--- 2710,2727 ----
  
  	Permanent_Manager = class {
  
  		static load() {
  			this._cutsceneData = {};
! 			if (localStorage.getItem("CUTSCENE") === null) {
! 				this._cutsceneData = {};
! 			} else {
! 				this._cutsceneData = JSON.parse(localStorage.getItem("CUTSCENE"));
! 			}
  		}
  
  		static save() {
  			let data = JSON.stringify(this._cutsceneData);
! 			localStorage.setItem("CUTSCENE", data);
  		}
  
  		static isCutsceneSkippable(key) {
***************
*** 2755,2774 ****
  		} 
  
  		static _deletePermanentCutscenes() {
! 			const pp = require("path");
! 			const fs = require("fs");
! 			const data_folder = this.dataFolder();
! 			const folder = pp.join(data_folder, this.determineOmoriFolder());
! 			fs.unlink(folder + "CUTSCENE.json", err => {
! 				if(!!err) {
! 					console.error("CUTSCENE.json can't be erased!");
! 					throw new Error(err);
! 				}
! 				else {
! 					this._cutsceneData = {};
! 					console.info("CUTSCENE.json has been correctly deleted.")
! 				}
! 			})			
  		}
  
  		static cutsceneData() {return this._cutsceneData}
--- 2735,2741 ----
  		} 
  
  		static _deletePermanentCutscenes() {
! 			localStorage.removeItem("CUTSCENE");		
  		}
  
  		static cutsceneData() {return this._cutsceneData}
***************
*** 2953,2974 ****
  
  			const path = require('path');
  			const fs = require('fs');
! 			const yaml = require('./js/libs/js-yaml-master')  
! 			var base = path.dirname(process.mainModule.filename);
  			if(window['$externalNotesData'] === undefined) {
! 				let noteBuffer = fs.readFileSync(base + '/data/Notes.PLUTO');
! 				noteBuffer = Encryption.decrypt(noteBuffer);
  				window['$externalNotesData'] = yaml.safeLoad(noteBuffer.toString());
  			}
  
  			if(window["$dataQuests"] === undefined) {
! 				let questBuffer = fs.readFileSync(base + '/data/Quests.PLUTO');
! 				questBuffer = Encryption.decrypt(questBuffer);
  				window["$dataQuests"] = yaml.safeLoad(questBuffer.toString());
  			}
  			for (var i = 0; i < this._databaseFiles.length; i++) {
  				var name = this._databaseFiles[i].name;
! 				var src = this._databaseFiles[i].src.replace(".json", ".KEL");
  				this.loadDataFile(name, src);
  			}		
  		}
--- 2920,2939 ----
  
  			const path = require('path');
  			const fs = require('fs');
! 			const yaml = require('yaml')  
! 			var base = window.location.origin;
  			if(window['$externalNotesData'] === undefined) {
! 				let noteBuffer = readFileSync(base + '/data/Notes.yaml');
  				window['$externalNotesData'] = yaml.safeLoad(noteBuffer.toString());
  			}
  
  			if(window["$dataQuests"] === undefined) {
! 				let questBuffer = readFileSync(base + '/data/Quests.yaml');
  				window["$dataQuests"] = yaml.safeLoad(questBuffer.toString());
  			}
  			for (var i = 0; i < this._databaseFiles.length; i++) {
  				var name = this._databaseFiles[i].name;
! 				var src = this._databaseFiles[i].src;
  				this.loadDataFile(name, src);
  			}		
  		}
***************
*** 2977,3013 ****
  			if(!!Utils.isOptionValid("test")) {return super.loadDataFile(name, src);}
  			const path = require('path');
  			const fs = require('fs');
! 			var base = path.dirname(process.mainModule.filename);
! 			fs.readFile(base + "/data/" + src, (err, buffer) => {
! 				if(err) {throw new Error(err)}
! 				let decrypt = Encryption.decrypt(buffer);
! 				window[name] = JSON.parse(decrypt.toString());
  				DataManager.onLoad(window[name]);
- 			});
- 
  		}
  
  		static loadMapData(mapId) {
  			if(!!Utils.isOptionValid("test")) {return super.loadMapData(mapId);}
  			const path = require('path');
  			const fs = require('fs');
! 			var base = path.dirname(process.mainModule.filename);
  			if(mapId > 0) {
! 				let filename = 'Map%1.KEL'.format(mapId.padZero(3));
  				this._mapLoader = false;
  				window["$dataMap"] = null;
  				Graphics.startLoading();
! 				fs.readFile(base + "/data/" + filename, (err, buffer) => {
! 					if(!!err) {
  						Graphics.printLoadingError(base + "/data/" + filename);
  						SceneManager.stop();
  					}
! 					let decrypt = Encryption.decrypt(buffer);
! 					window["$dataMap"] = JSON.parse(decrypt.toString());
  					DataManager.onLoad(window["$dataMap"])
  					Graphics.endLoading();
  					this._mapLoader = true;
  				})
  				this.loadTiledMapData(mapId)
  			}
  			else {
--- 2942,2975 ----
  			if(!!Utils.isOptionValid("test")) {return super.loadDataFile(name, src);}
  			const path = require('path');
  			const fs = require('fs');
! 			var base = window.location.origin;
! 			let buffer = readFileSync(base + "/data/" + src);
! 			window[name] = JSON.parse(buffer.toString());
  			DataManager.onLoad(window[name]);
  		}
  
  		static loadMapData(mapId) {
  			if(!!Utils.isOptionValid("test")) {return super.loadMapData(mapId);}
  			const path = require('path');
  			const fs = require('fs');
! 			var base = window.location.origin;
  			if(mapId > 0) {
! 				let filename = 'Map%1.json'.format(mapId.padZero(3));
  				this._mapLoader = false;
  				window["$dataMap"] = null;
  				Graphics.startLoading();
! 				fetch(base + "/data/" + filename).then(response => {
! 					if (!response.ok) {
  						Graphics.printLoadingError(base + "/data/" + filename);
  						SceneManager.stop();
  					}
! 					response.json().then(json => {
! 						window["$dataMap"] = json;
  						DataManager.onLoad(window["$dataMap"])
  						Graphics.endLoading();
  						this._mapLoader = true;
  					})
+ 				})
  				this.loadTiledMapData(mapId)
  			}
  			else {
***************
*** 3020,3039 ****
  			if(!!Utils.isOptionValid("test")) {return super.loadTiledMapData(mapId);}
  			const path = require('path');
  			const fs = require('fs');
! 			var base = path.dirname(process.mainModule.filename);
! 			let mapName = `/maps/map${mapId}.AUBREY`;
  			this.unloadTiledMapData();
! 			fs.readFile(base + mapName, (err, buffer) => {
! 				if(!!err) {
! 					console.error(err)
  					Graphics.printLoadingError(base + mapName);
  					SceneManager.stop();
  				}
! 				let decrypt = Encryption.decrypt(buffer);
! 				DataManager._tempTiledData = JSON.parse(decrypt.toString());
  	            DataManager.loadTilesetData();
  	            DataManager._tiledLoaded = true;
  			})
  		}
  
  		// Compatibility with YEP Call Event
--- 2982,3001 ----
  			if(!!Utils.isOptionValid("test")) {return super.loadTiledMapData(mapId);}
  			const path = require('path');
  			const fs = require('fs');
! 			var base = window.location.origin;
! 			let mapName = `/maps/map${mapId}.json`;
  			this.unloadTiledMapData();
! 			fetch(base + mapName).then(response => {
! 				if (!response.ok) {
  					Graphics.printLoadingError(base + mapName);
  					SceneManager.stop();
  				}
! 				response.json().then(json => {
! 					DataManager._tempTiledData = json;
  					DataManager.loadTilesetData();
  					DataManager._tiledLoaded = true;
  				})
+ 			})
  		}
  
  		// Compatibility with YEP Call Event
***************
*** 3041,3047 ****
  		static loadCallMapData(mapId) {
  			if(!!Utils.isOptionValid("test")) {return super.loadCallMapData(mapId);}
  			if(mapId > 0) {
! 				let filename = 'Map%1.KEL'.format(mapId.padZero(3));
  				this.loadDataFile("$callEventMap", filename);
  			}
  			else {
--- 3003,3009 ----
  		static loadCallMapData(mapId) {
  			if(!!Utils.isOptionValid("test")) {return super.loadCallMapData(mapId);}
  			if(mapId > 0) {
! 				let filename = 'Map%1.json'.format(mapId.padZero(3));
  				this.loadDataFile("$callEventMap", filename);
  			}
  			else {
***************
*** 3063,3089 ****
  
  	LanguageManager = class extends LanguageManager {
  
! 		static loadLanguageFiles(language) {
  			if(!!Utils.isOptionValid("test")) {return super.loadLanguageFiles(language);}
  			const path = require('path');
  			const fs = require('fs');
! 			const yaml = require('./js/libs/js-yaml-master')  
! 			var base = path.dirname(process.mainModule.filename);
! 
! 			let folder = "/Languages/" + language + "/";
  			let filePath = base + folder;
! 			let dirList = fs.readdirSync(filePath);
  			this._data[language] = {text: {}};
! 			for(let directory of dirList) {
! 				let format = path.extname(directory);
! 				let filename = path.basename(directory, format);
! 				if(format === ".HERO") {
! 					let buff = fs.readFileSync(filePath + '/' + filename + format);
! 					buff = Encryption.decrypt(buff);
! 					this._data[language].text[filename] = yaml.safeLoad(buff.toString());
! 				}
  			}
! 
  		}
  	}
  
--- 3025,3054 ----
  
  	LanguageManager = class extends LanguageManager {
  
! 		static async loadLanguageFiles(language) {
  			if(!!Utils.isOptionValid("test")) {return super.loadLanguageFiles(language);}
  			const path = require('path');
  			const fs = require('fs');
! 			const yaml = require('yaml');
! 			var base = window.location.origin;
! 			let folder = "/languages/" + language + "/";
  			let filePath = base + folder;
! 			let dirList = JSON.parse(readFileSync(filePath + "list.json").toString())["files"];
  			this._data[language] = {text: {}};
! 			let asyncList = [];
! 			let hasCompleted = false;
! 			for(let file of dirList) {
! 				let realname = file["name"].replace(".yaml", "");
! 				let requestPromise = new Promise((resolve,reject) => {
! 					fetch(filePath + file["name"]).then(response => {
! 						response.text().then(buff => {
! 							this._data[language].text[realname] = yaml.safeLoad(buff.toString());
! 						});
! 					});
! 				})
! 				asyncList.push(requestPromise);
  			}
! 			Promise.all(asyncList).then(() => { hasCompleted = true });
  		}
  	}
  
***************
*** 3102,3114 ****
  			if(window["$atlasData"] === undefined) {
  				const path = require("path");
  				const fs = require("fs");
! 				const yaml = require('./js/libs/js-yaml-master')
! 				var base = path.dirname(process.mainModule.filename);
! 				let folder = '/img/atlases/';
! 				var filePath = base + folder;
! 				var dirList = fs.readdirSync(filePath);
! 				let yy = fs.readFileSync(base + '/data/Atlas.PLUTO');
! 				yy = Encryption.decrypt(yy);
  				var data = yaml.safeLoad(yy);
  				window['$atlasData'] = data;
  			}
--- 3067,3078 ----
  			if(window["$atlasData"] === undefined) {
  				const path = require("path");
  				const fs = require("fs");
! 				const yaml = require('yaml');
! 				var base = window.location.origin;
! 				//let folder = '/img/atlases/';
! 				//var filePath = base + folder;
! 				//var dirList = fs.readdirSync(filePath);
! 				let yy = readFileSync(base + '/data/Atlas.yaml');
  				var data = yaml.safeLoad(yy);
  				window['$atlasData'] = data;
  			}
diff '--color=auto' -crbB "a/www/js/plugins/Omori BASE.js" "b/www/js/plugins/Omori BASE.js"
*** "a/www/js/plugins/Omori BASE.js"	2024-07-28 22:36:58.426267075 -0500
--- "b/www/js/plugins/Omori BASE.js"	2024-07-21 08:37:28.726474482 -0500
***************
*** 16,22 ****
   */
  //=============================================================================
  
! 
  
  window.focus();
  
--- 16,27 ----
   */
  //=============================================================================
  
! function readFileSync(filename, options = {}) {
!   let result = new XMLHttpRequest;
!   result.open("GET", filename, false);
!   result.send();
!   return result.responseText;
! }
  
  window.focus();
  
***************
*** 561,578 ****
  // * Convert Atlas JSON to YAML
  //=============================================================================
  DataManager.covertAtlasJSONtoYAML = function(name, folder = '') {
    const path = require('path');
    const fs = require('fs');
!   const yaml = require('./js/libs/js-yaml-master')
!   const base = path.dirname(process.mainModule.filename);
!   const filePath = path.join(base, name);
!   const filename = path.basename(filePath);
    // Make JSON Object
!   let jsonObj = JSON.parse(fs.readFileSync(filePath + '.json', { encoding: 'utf8' }));
    // Make Yaml Object
    let yamlObj = {};
    // Get Image Name
!   const image = path.basename(jsonObj.meta.image, '.png');
    // Get Frames
    const frames = jsonObj.frames;
    // Go Through List of Entries and replace messages
--- 566,583 ----
  // * Convert Atlas JSON to YAML
  //=============================================================================
  DataManager.covertAtlasJSONtoYAML = function(name, folder = '') {
+   debugger
    const path = require('path');
    const fs = require('fs');
!   const yaml = require("yaml")
!   const base = window.location.origin;
!   const filePath = base + name;
    // Make JSON Object
!   let jsonObj = JSON.parse(readFileSync(filePath));
    // Make Yaml Object
    let yamlObj = {};
    // Get Image Name
!   const image = jsonObj.meta.image.replace(".png", "");
    // Get Frames
    const frames = jsonObj.frames;
    // Go Through List of Entries and replace messages
***************
*** 761,769 ****
  ConfigManager.restoreDefaultConfig = function() {
    const fs = require("fs");
    const path = require('path');
!   var base = path.dirname(process.mainModule.filename);
!   base = path.join(base, 'save/');
!   if(fs.existsSync(base + "config.rpgsave")) {fs.unlinkSync(base + "config.rpgsave");}
    ConfigManager.characterStrafe = true;
    ConfigManager.characterTurning = true;
    ConfigManager.battleAnimations = true;
--- 766,774 ----
  ConfigManager.restoreDefaultConfig = function() {
    const fs = require("fs");
    const path = require('path');
!   var base = window.location.origin;
!   base = base + '/save/';
!   //if(fs.existsSync(base + "config.rpgsave")) {fs.unlinkSync(base + "config.rpgsave");}
    ConfigManager.characterStrafe = true;
    ConfigManager.characterTurning = true;
    ConfigManager.battleAnimations = true;
diff '--color=auto' -crbB "a/www/js/plugins/Omori Battle System.js" "b/www/js/plugins/Omori Battle System.js"
*** "a/www/js/plugins/Omori Battle System.js"	2024-07-28 22:36:58.439600509 -0500
--- "b/www/js/plugins/Omori Battle System.js"	2024-07-22 20:08:11.181096140 -0500
***************
*** 346,352 ****
      // If Data Exists
      if (data) {
        this._logWindow.push('clear');
!       this._logWindow.push('playSE', {name: "BA_Happy", volume: 90, pitch: 100, pan: 0});
        this._logWindow.push('addText', TextManager.levelUp.format(actor._name, TextManager.level, data.level));
        this._logWindow.push('wait');
        this._logWindow.push('waitForInput');
--- 346,352 ----
      // If Data Exists
      if (data) {
        this._logWindow.push('clear');
!       this._logWindow.push('playSE', {name: "BA_happy", volume: 90, pitch: 100, pan: 0});
        this._logWindow.push('addText', TextManager.levelUp.format(actor._name, TextManager.level, data.level));
        this._logWindow.push('wait');
        this._logWindow.push('waitForInput');
diff '--color=auto' -crbB "a/www/js/plugins/Omori Name Input.js" "b/www/js/plugins/Omori Name Input.js"
*** "a/www/js/plugins/Omori Name Input.js"	2024-07-28 22:36:58.426267075 -0500
--- "b/www/js/plugins/Omori Name Input.js"	2024-07-19 04:24:22.140334248 -0500
***************
*** 111,117 ****
  // * Wrap NWjs Alert
  //=============================================================================
  KeyboardInput._wrapNwjsAlert = function() {
!   if (Utils.isNwjs()) {
      var _alert = window.alert;
      window.alert = function() {
        var gui = require('nw.gui');
--- 111,117 ----
  // * Wrap NWjs Alert
  //=============================================================================
  KeyboardInput._wrapNwjsAlert = function() {
!   /*if (Utils.isNwjs()) {
      var _alert = window.alert;
      window.alert = function() {
        var gui = require('nw.gui');
***************
*** 120,126 ****
        win.focus();
        KeyboardInput.clear();
      };
!   }
  };
  //=============================================================================
  // * Determine if Default Should be prevented
--- 120,126 ----
        win.focus();
        KeyboardInput.clear();
      };
!   }*/
  };
  //=============================================================================
  // * Determine if Default Should be prevented
diff '--color=auto' -crbB "a/www/js/plugins/Omori Quest Menu.js" "b/www/js/plugins/Omori Quest Menu.js"
*** "a/www/js/plugins/Omori Quest Menu.js"	2024-07-28 22:36:58.422933717 -0500
--- "b/www/js/plugins/Omori Quest Menu.js"	2024-07-21 06:22:04.193420429 -0500
***************
*** 6,11 ****
--- 6,19 ----
  var Imported = Imported || {} ; Imported.TDS_QuestMenu = true;
  // Initialize Alias Object
  var _TDS_ = _TDS_ || {} ; _TDS_.QuestMenu = _TDS_.QuestMenu || {};
+ 
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest;
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  //=============================================================================
   /*:
   * @plugindesc
***************
*** 123,131 ****
    _TDS_.QuestMenu.DataManager_loadDatabase.call(this);
    var path = require('path');
    var fs = require('fs');
!   var yaml = require('./js/libs/js-yaml-master')
    // Load Quests
!   window['$dataQuests'] = yaml.safeLoad(fs.readFileSync('data/Quests.yaml', 'utf8'));
  };
  
  
--- 131,139 ----
    _TDS_.QuestMenu.DataManager_loadDatabase.call(this);
    var path = require('path');
    var fs = require('fs');
!   var yaml = require("yaml")
    // Load Quests
!   window['$dataQuests'] = yaml.safeLoad(readFileSync(window.location.origin + '/data/Quests.yaml'));
  };
  
  
diff '--color=auto' -crbB a/www/js/plugins/Text_Language_Processor.js b/www/js/plugins/Text_Language_Processor.js
*** a/www/js/plugins/Text_Language_Processor.js	2024-07-28 22:36:58.426267075 -0500
--- b/www/js/plugins/Text_Language_Processor.js	2024-07-26 01:28:09.596386220 -0500
***************
*** 6,11 ****
--- 6,22 ----
  var Imported = Imported || {} ; Imported.TDS_TextLanguageProcessor = true;
  // Initialize Alias Object
  var _TDS_ = _TDS_ || {} ; _TDS_.TextLanguageProcessor = _TDS_.TextLanguageProcessor || {};
+ 
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest;
+   if (filename.endsWith(".yaml")) {
+ 		result.overrideMimeType("text/plain");
+ 	}
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  //=============================================================================
   /*:
   * @plugindesc
***************
*** 172,237 ****
  //=============================================================================
  // * Load Language Files
  //=============================================================================
! LanguageManager.loadLanguageFiles = function(language) {
    var path = require('path');
    var fs = require('fs');
!   var yaml = require('./js/libs/js-yaml-master')
!   var base = path.dirname(process.mainModule.filename);
    // Get Folder
!   var folder = '/Languages/' + language + '/';
    // Get FilePath
    var filePath = base + folder;
    // Get Directory List
!   var dirList = fs.readdirSync(filePath);
    // Initialize Language Data
    this._data[language] = { text: {} };
    // Go Through Directory
    for (var i = 0; i < dirList.length; i++) {
!     // Get Directory
!     var directory = dirList[i];
!     // Get Format
!     var format = path.extname(dirList[i]);    
!     // Get Filename
!     var filename = path.basename(directory, format);
!     // If Format is yaml
!     if (format === '.yaml') {
!       // Get Language File Data
!       var data = yaml.safeLoad(fs.readFileSync(filePath + '/' + filename + format, 'utf8'));
!       // Set Language Text Data
!       this._data[language].text[filename] = data;
!       continue;
!     };
    };
  };
  //=============================================================================
  // * Load All Language Files
  //=============================================================================
  LanguageManager.loadAllLanguageFiles = function() {
!   var path = require('path');
!   var fs = require('fs');
!   var base = path.dirname(process.mainModule.filename);
!   // Get Folder
!   var folder = '/Languages/';
!   // Get FilePath
!   var filePath = base + folder;      
!   // Get Directory List
!   var dirList = fs.readdirSync(filePath);
!   // Go Through Directory
!   for (var i = 0; i < dirList.length; i++) {
!     // Get Directory
!     var directory = dirList[i];
!     // Get Format
!     var format = path.extname(dirList[i]);    
!     // Get Filename
!     var filename = path.basename(directory, format);
!     // Get Stat
!     var stat = fs.statSync(filePath + filename)    
!     //If it's a directory
!     if (stat.isDirectory()) {
!       // Load Language Files
!       this.loadLanguageFiles(directory);
!     };
!   };
  };
  // Initialize Language Manager
  //LanguageManager.initialize();
--- 183,219 ----
  //=============================================================================
  // * Load Language Files
  //=============================================================================
! LanguageManager.loadLanguageFiles = async function(language) {
    var path = require('path');
    var fs = require('fs');
!   var yaml = require('yaml')
!   var base = window.location.origin;
    // Get Folder
!   var folder = '/languages/' + language + '/';
    // Get FilePath
    var filePath = base + folder;
    // Get Directory List
!   var dirList = JSON.parse(readFileSync(folder + "list.json").toString())["files"];
    // Initialize Language Data
    this._data[language] = { text: {} };
+   let asyncList = [];
+   let hasCompleted = false;
    // Go Through Directory
    for (var i = 0; i < dirList.length; i++) {
!     let filename = dirList[i]["name"];
!     let requestPromise = new Promise((resolve,reject) => {
!       let buff = (fetch(filePath + file["name"])).text();
!       this._data[language].text[realname] = yaml.safeLoad(buff.toString());
!     })
!     asyncList.push(requestPromise);
    };
+   Promise.all(asyncList).then(() => { hasCompleted = true });
  };
  //=============================================================================
  // * Load All Language Files
  //=============================================================================
  LanguageManager.loadAllLanguageFiles = function() {
!   this.loadLanguageFiles("en");
  };
  // Initialize Language Manager
  //LanguageManager.initialize();
diff '--color=auto' -crbB a/www/js/plugins/YED_Tiled.js b/www/js/plugins/YED_Tiled.js
*** a/www/js/plugins/YED_Tiled.js	2024-07-28 22:36:58.456267301 -0500
--- b/www/js/plugins/YED_Tiled.js	2024-07-24 13:50:06.466376908 -0500
***************
*** 69,74 ****
--- 69,81 ----
   *   The tiles on this layer will transfer player to another level.
   */
  
+ function readFileSync(filename, options = {}) {
+     let result = new XMLHttpRequest;
+     result.open("GET", filename, false);
+     result.send();
+     return result.responseText;
+ }
+ 
  var Imported = Imported || {};
  Imported.YED_Tiled = true;
  const YED_TiledParameters = PluginManager.parameters("YED_Tiled");
***************
*** 196,203 ****
  					var filename = tileset.source.replace(/^.*[\\\/]/, '');
  					var xhr = new XMLHttpRequest();
  
! 					xhr.open('GET', "./maps/" + filename);
  					xhr.overrideMimeType('application/json');
  
  					xhr.onreadystatechange = function () {
  						if (xhr.readyState === 4) {
--- 203,211 ----
  					var filename = tileset.source.replace(/^.*[\\\/]/, '');
  					var xhr = new XMLHttpRequest();
  
! 					xhr.open('GET', "/maps/" + filename);
  					xhr.overrideMimeType('application/json');
+ 					console.log(filename);
  
  					xhr.onreadystatechange = function () {
  						if (xhr.readyState === 4) {
***************
*** 213,229 ****
  				else {
  					DataManager._tilesetToLoad++;
  					var filename = tileset.source.replace(/^.*[\\\/]/, '');
  					const path = require('path');
  					const fs = require('fs');
! 					var base = path.dirname(process.mainModule.filename);
! 					filename = filename.replace(".json", ".AUBREY")
! 					fs.readFile(base + "/maps/" + filename, (err, data) => {
! 						if(err) {throw new Error(err)}
! 						data = Encryption.decrypt(data);
! 						Object.assign(tileset,JSON.parse(data.toString()))
  						DataManager._tilesetToLoad--;
  					});
- 
  				}
  	        };
  
--- 221,237 ----
  				else {
  					DataManager._tilesetToLoad++;
  					var filename = tileset.source.replace(/^.*[\\\/]/, '');
+ 					filename = filename.replace("DW_Otherworld.json", "DW_OTHERWORLD.json");
  					const path = require('path');
  					const fs = require('fs');
! 					var base = window.location.origin;
! 					fetch(base + "/maps/" + filename).then(response => {
! 						if(!response.ok) {throw new Error("Failed to load " + base + "/maps/" + filename)}
! 						response.json().then(json => {
! 							Object.assign(tileset,json);
  							DataManager._tilesetToLoad--;
+ 						})
  					});
  				}
  	        };
  
diff '--color=auto' -crbB a/www/js/plugins/YEP_Debugger.js b/www/js/plugins/YEP_Debugger.js
*** a/www/js/plugins/YEP_Debugger.js	2024-07-28 22:36:58.472934094 -0500
--- b/www/js/plugins/YEP_Debugger.js	2024-07-21 08:16:45.768625368 -0500
***************
*** 451,458 ****
  
  Yanfly.Debug.Graphics_printError = Graphics.printError;
  Graphics.printError = function(name, message) {
!   var _debugWindow = require('nw.gui').Window.get().showDevTools();
!   _debugWindow.moveTo(0, 0);
    window.focus();
    Yanfly.Debug.Graphics_printError.call(this, name, message);
  };
--- 451,458 ----
  
  Yanfly.Debug.Graphics_printError = Graphics.printError;
  Graphics.printError = function(name, message) {
!   //var _debugWindow = require('nw.gui').Window.get().showDevTools();
!   //_debugWindow.moveTo(0, 0);
    window.focus();
    Yanfly.Debug.Graphics_printError.call(this, name, message);
  };
***************
*** 460,467 ****
  }; // Yanfly.Param.DebugAutoConsole
  
  var log = function(v) {
!   var _debugWindow = require('nw.gui').Window.get().showDevTools();
!   _debugWindow.moveTo(0, 0);
    console.log(v);
  };
  
--- 460,467 ----
  }; // Yanfly.Param.DebugAutoConsole
  
  var log = function(v) {
!   /*var _debugWindow = require('nw.gui').Window.get().showDevTools();
!   _debugWindow.moveTo(0, 0);*/
    console.log(v);
  };
  
diff '--color=auto' -crbB a/www/js/plugins/YEP_EventCopier.js b/www/js/plugins/YEP_EventCopier.js
*** a/www/js/plugins/YEP_EventCopier.js	2024-07-28 22:36:58.429600433 -0500
--- b/www/js/plugins/YEP_EventCopier.js	2024-07-25 01:58:51.902040269 -0500
***************
*** 3,8 ****
--- 3,15 ----
  // YEP_EventCopier.js
  //=============================================================================
  
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest;
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  var Imported = Imported || {};
  Imported.YEP_EventCopier = true;
  
***************
*** 291,302 ****
    else {
  		const path = require('path');
  		const fs = require('fs');
! 		var base = path.dirname(process.mainModule.filename);	
! 		let filename = 'Map%1.KEL'.format(mapId.padZero(3));
  		Yanfly.PreloadedMaps[mapId] = null;	
! 		fs.readFile(base + "/data/" + filename, (err, data) => {
! 			data = Encryption.decrypt(data);
! 			Yanfly.PreloadedMaps[mapId] = JSON.parse(data.toString());
  		})
    }
  };
--- 298,310 ----
    else {
  		const path = require('path');
  		const fs = require('fs');
! 		var base = window.location.origin;	
! 		let filename = 'Map%1.json'.format(mapId.padZero(3));
      Yanfly.PreloadedMaps[mapId] = null;
! 		fetch(base + "/data/" + filename).then(response => {
! 			response.json().then(json => {
!         Yanfly.PreloadedMaps[mapId] = json;
!       })
  		})
    }
  };
***************
*** 305,313 ****
--- 313,326 ----
    // Process Template Names
    Yanfly.EventCopier.Template = {};
    var length = Yanfly.Param.EventCopierList.length;
+   let alreadyProcessed = [];
    for (var i = 0; i < length; ++i) {
      var data = JSON.parse(Yanfly.Param.EventCopierList[i]);
      var name = data.Name.toUpperCase();
+     if (alreadyProcessed.includes(data.MapID)) {
+       continue;
+     }
+     alreadyProcessed.push(data.MapID);
      Yanfly.loadMapData(parseInt(data.MapID));
      Yanfly.EventCopier.Template[name] = {
        mapId: data.MapID,
***************
*** 321,326 ****
--- 334,342 ----
    var length = data.length;
    for (var i = 0; i < length; ++i) {
      var mapId = parseInt(data[i]);
+     if (alreadyProcessed.includes(data[i])) {
+       continue;
+     }
      Yanfly.loadMapData(mapId)
    }
  };
diff '--color=auto' -crbB a/www/js/plugins/YEP_EventMorpher.js b/www/js/plugins/YEP_EventMorpher.js
*** a/www/js/plugins/YEP_EventMorpher.js	2024-07-28 22:36:58.476267451 -0500
--- b/www/js/plugins/YEP_EventMorpher.js	2024-07-25 01:59:49.182456328 -0500
***************
*** 3,8 ****
--- 3,15 ----
  // YEP_EventMorpher.js
  //=============================================================================
  
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest;
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  var Imported = Imported || {};
  Imported.YEP_EventMorpher = true;
  
***************
*** 230,241 ****
    else {
  		const path = require('path');
  		const fs = require('fs');
! 		var base = path.dirname(process.mainModule.filename);	
! 		let filename = 'Map%1.KEL'.format(mapId.padZero(3));
  		Yanfly.PreloadedMaps[mapId] = null;	
! 		fs.readFile(base + "/data/" + filename, (err, data) => {
! 			data = Encryption.decrypt(data);
! 			Yanfly.PreloadedMaps[mapId] = JSON.parse(data.toString());
  		})
    }
  };
--- 237,249 ----
    else {
  		const path = require('path');
  		const fs = require('fs');
! 		var base = window.location.origin;
! 		let filename = 'Map%1.json'.format(mapId.padZero(3));
  		Yanfly.PreloadedMaps[mapId] = null;
! 		fetch(base + "/data/" + filename).then(response => {
! 			response.json().then(json => {
!         Yanfly.PreloadedMaps[mapId] = json;
!       })
  		})
    }
  };
***************
*** 244,252 ****
--- 252,265 ----
    // Process Template Names
    Yanfly.EventMorph.Template = {};
    var length = Yanfly.Param.EventMorpherList.length;
+   let alreadyProcessed = [];
    for (var i = 0; i < length; ++i) {
      var data = JSON.parse(Yanfly.Param.EventMorpherList[i]);
      var name = data.Name.toUpperCase();
+     if (alreadyProcessed.includes(data.MapID)) {
+       continue;
+     }
+     alreadyProcessed.push(data.MapID);
      Yanfly.loadMapData(parseInt(data.MapID));
      Yanfly.EventMorph.Template[name] = {
        mapId: data.MapID,
***************
*** 258,263 ****
--- 271,279 ----
    var length = data.length;
    for (var i = 0; i < length; ++i) {
      var mapId = parseInt(data[i]);
+     if (alreadyProcessed.includes(data[i])) {
+       continue;
+     }
      Yanfly.loadMapData(mapId)
    }
  };
diff '--color=auto' -crbB a/www/js/plugins/YEP_EventSpawner.js b/www/js/plugins/YEP_EventSpawner.js
*** a/www/js/plugins/YEP_EventSpawner.js	2024-07-28 22:36:58.429600433 -0500
--- b/www/js/plugins/YEP_EventSpawner.js	2024-07-25 01:59:44.949092245 -0500
***************
*** 3,8 ****
--- 3,15 ----
  // YEP_EventSpawner.js
  //=============================================================================
  
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest;
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  var Imported = Imported || {};
  Imported.YEP_EventSpawner = true;
  
***************
*** 375,386 ****
    else {
  		const path = require('path');
  		const fs = require('fs');
! 		var base = path.dirname(process.mainModule.filename);	
! 		let filename = 'Map%1.KEL'.format(mapId.padZero(3));
  		Yanfly.PreloadedMaps[mapId] = null;	
! 		fs.readFile(base + "/data/" + filename, (err, data) => {
! 			data = Encryption.decrypt(data);
! 			Yanfly.PreloadedMaps[mapId] = JSON.parse(data.toString());
  		})
    }
  };
--- 382,394 ----
    else {
  		const path = require('path');
  		const fs = require('fs');
! 		var base = window.location.origin;	
! 		let filename = 'Map%1.json'.format(mapId.padZero(3));
  		Yanfly.PreloadedMaps[mapId] = null;
! 		fetch(base + "/data/" + filename).then(response => {
! 			response.json().then(json => {
!         Yanfly.PreloadedMaps[mapId] = json;
!       })
  		})
    }
  };
***************
*** 389,397 ****
--- 397,410 ----
    // Process Template Names
    Yanfly.EventSpawn.Template = {};
    var length = Yanfly.Param.EventSpawnerList.length;
+   let alreadyProcessed = [];
    for (var i = 0; i < length; ++i) {
      var data = JSON.parse(Yanfly.Param.EventSpawnerList[i]);
      var name = data.Name.toUpperCase();
+     if (alreadyProcessed.includes(data.MapID)) {
+       continue;
+     }
+     alreadyProcessed.push(data.MapID);
      Yanfly.loadMapData(parseInt(data.MapID));
      Yanfly.EventSpawn.Template[name] = {
        mapId: data.MapID,
***************
*** 403,408 ****
--- 416,424 ----
    var length = data.length;
    for (var i = 0; i < length; ++i) {
      var mapId = parseInt(data[i]);
+     if (alreadyProcessed.includes(data[i])) {
+       continue;
+     }
      Yanfly.loadMapData(mapId)
    }
  };
diff '--color=auto' -crbB a/www/js/plugins/YEP_X_CounterControl.js b/www/js/plugins/YEP_X_CounterControl.js
*** a/www/js/plugins/YEP_X_CounterControl.js	2024-07-28 22:36:58.462934018 -0500
--- b/www/js/plugins/YEP_X_CounterControl.js	2024-07-23 12:08:46.621849994 -0500
***************
*** 1189,1197 ****
      // VARIABLE
      } else if (line.match(/VARIABLE[ ](\d+)[ ](.*)/i)) {
        var varId = parseInt(RegExp.$1);
!       var eval = String(RegExp.$2);
!       eval = '$gameVariables.value(' + varId + ') ' + eval;
!       return this.checkCounterEval(eval, skill, subject, target);
      // NOT SKILL
      } else if (line.match(/NOT SKILL:[ ](.*)/i)) {
        var value = String(RegExp.$1);
--- 1189,1197 ----
      // VARIABLE
      } else if (line.match(/VARIABLE[ ](\d+)[ ](.*)/i)) {
        var varId = parseInt(RegExp.$1);
!       var result = String(RegExp.$2);
!       result = '$gameVariables.value(' + varId + ') ' + eval;
!       return this.checkCounterEval(result, skill, subject, target);
      // NOT SKILL
      } else if (line.match(/NOT SKILL:[ ](.*)/i)) {
        var value = String(RegExp.$1);
***************
*** 1320,1384 ****
  };
  
  BattleManager.checkCounterAttacker = function(v1, v2, skill, subject, target) {
!     var eval = 'subject.';
      if (['LEVEL', 'LV', 'LVL'].contains(v1.toUpperCase())) {
!       eval += 'level';
      } else if (['MAX HP', 'MAXHP', 'MHP'].contains(v1.toUpperCase())) {
!       eval += 'mhp';
      } else if (['HP', 'CURRENT HP'].contains(v1.toUpperCase())) {
!       eval += 'hp';
      } else if (['MAX MP', 'MAXMP', 'MMP'].contains(v1.toUpperCase())) {
!       eval += 'mmp';
      } else if (['MP', 'CURRENT MP'].contains(v1.toUpperCase())) {
!       eval += 'mp';
      } else if (['ATK', 'STR'].contains(v1.toUpperCase())) {
!       eval += 'atk';
      } else if (['DEF'].contains(v1.toUpperCase())) {
!       eval += 'def';
      } else if (['MAT', 'INT', 'SPI'].contains(v1.toUpperCase())) {
!       eval += 'mat';
      } else if (['MDF', 'RES'].contains(v1.toUpperCase())) {
!       eval += 'mdf';
      } else if (['AGI', 'SPD'].contains(v1.toUpperCase())) {
!       eval += 'agi';
      } else if (['LUK'].contains(v1.toUpperCase())) {
!       eval += 'luk';
      } else {
        return false;
      }
!     eval += ' ' + v2;
!     return this.checkCounterEval(eval, skill, subject, target);
  };
  
  BattleManager.checkCounterDefender = function(v1, v2, skill, subject, target) {
!     var eval = 'target.';
      if (['LEVEL', 'LV', 'LVL'].contains(v1.toUpperCase())) {
!       eval += 'level';
      } else if (['MAX HP', 'MAXHP', 'MHP'].contains(v1.toUpperCase())) {
!       eval += 'mhp';
      } else if (['HP', 'CURRENT HP'].contains(v1.toUpperCase())) {
!       eval += 'hp';
      } else if (['MAX MP', 'MAXMP', 'MMP'].contains(v1.toUpperCase())) {
!       eval += 'mmp';
      } else if (['MP', 'CURRENT MP'].contains(v1.toUpperCase())) {
!       eval += 'mp';
      } else if (['ATK', 'STR'].contains(v1.toUpperCase())) {
!       eval += 'atk';
      } else if (['DEF'].contains(v1.toUpperCase())) {
!       eval += 'def';
      } else if (['MAT', 'INT', 'SPI'].contains(v1.toUpperCase())) {
!       eval += 'mat';
      } else if (['MDF', 'RES'].contains(v1.toUpperCase())) {
!       eval += 'mdf';
      } else if (['AGI', 'SPD'].contains(v1.toUpperCase())) {
!       eval += 'agi';
      } else if (['LUK'].contains(v1.toUpperCase())) {
!       eval += 'luk';
      } else {
        return false;
      }
!     eval += ' ' + v2;
!     return this.checkCounterEval(eval, skill, subject, target);
  };
  
  BattleManager.evadeAndCounter = function(subject, target) {
--- 1320,1384 ----
  };
  
  BattleManager.checkCounterAttacker = function(v1, v2, skill, subject, target) {
!     var str = 'subject.';
      if (['LEVEL', 'LV', 'LVL'].contains(v1.toUpperCase())) {
!       str += 'level';
      } else if (['MAX HP', 'MAXHP', 'MHP'].contains(v1.toUpperCase())) {
!       str += 'mhp';
      } else if (['HP', 'CURRENT HP'].contains(v1.toUpperCase())) {
!       str += 'hp';
      } else if (['MAX MP', 'MAXMP', 'MMP'].contains(v1.toUpperCase())) {
!       str += 'mmp';
      } else if (['MP', 'CURRENT MP'].contains(v1.toUpperCase())) {
!       str += 'mp';
      } else if (['ATK', 'STR'].contains(v1.toUpperCase())) {
!       str += 'atk';
      } else if (['DEF'].contains(v1.toUpperCase())) {
!       str += 'def';
      } else if (['MAT', 'INT', 'SPI'].contains(v1.toUpperCase())) {
!       str += 'mat';
      } else if (['MDF', 'RES'].contains(v1.toUpperCase())) {
!       str += 'mdf';
      } else if (['AGI', 'SPD'].contains(v1.toUpperCase())) {
!       str += 'agi';
      } else if (['LUK'].contains(v1.toUpperCase())) {
!       str += 'luk';
      } else {
        return false;
      }
!     str += ' ' + v2;
!     return this.checkCounterEval(str, skill, subject, target);
  };
  
  BattleManager.checkCounterDefender = function(v1, v2, skill, subject, target) {
!     var str = 'target.';
      if (['LEVEL', 'LV', 'LVL'].contains(v1.toUpperCase())) {
!       str += 'level';
      } else if (['MAX HP', 'MAXHP', 'MHP'].contains(v1.toUpperCase())) {
!       str += 'mhp';
      } else if (['HP', 'CURRENT HP'].contains(v1.toUpperCase())) {
!       str += 'hp';
      } else if (['MAX MP', 'MAXMP', 'MMP'].contains(v1.toUpperCase())) {
!       str += 'mmp';
      } else if (['MP', 'CURRENT MP'].contains(v1.toUpperCase())) {
!       str += 'mp';
      } else if (['ATK', 'STR'].contains(v1.toUpperCase())) {
!       str += 'atk';
      } else if (['DEF'].contains(v1.toUpperCase())) {
!       str += 'def';
      } else if (['MAT', 'INT', 'SPI'].contains(v1.toUpperCase())) {
!       str += 'mat';
      } else if (['MDF', 'RES'].contains(v1.toUpperCase())) {
!       str += 'mdf';
      } else if (['AGI', 'SPD'].contains(v1.toUpperCase())) {
!       str += 'agi';
      } else if (['LUK'].contains(v1.toUpperCase())) {
!       str += 'luk';
      } else {
        return false;
      }
!     str += ' ' + v2;
!     return this.checkCounterEval(str, skill, subject, target);
  };
  
  BattleManager.evadeAndCounter = function(subject, target) {
***************
*** 1507,1513 ****
  };
  
  Game_Battler.prototype.counterSkills = function() {
!     if (this._counterSkills === undefined || this._counterSkills === []) {
        return [];
      }
      var array = [];
--- 1507,1513 ----
  };
  
  Game_Battler.prototype.counterSkills = function() {
!     if (this._counterSkills === undefined || this._counterSkills == []) {
        return [];
      }
      var array = [];
diff '--color=auto' -crbB a/www/js/plugins/YIN_OmoriFixes.js b/www/js/plugins/YIN_OmoriFixes.js
*** a/www/js/plugins/YIN_OmoriFixes.js	2024-07-28 22:36:58.479600810 -0500
--- b/www/js/plugins/YIN_OmoriFixes.js	2024-07-21 07:38:19.760735351 -0500
***************
*** 4,9 ****
--- 4,30 ----
  //=============================================================================
  // Longer fade after loading the game
  //=============================================================================
+ 
+ function readFileSync(filename, error = false) {
+     let result = new XMLHttpRequest;
+     result.open("GET", filename, false);
+     success = false;
+     let response;
+     if (error) {
+         try {
+             result.send()
+             success = true;
+         } catch {
+             success = false;
+         }
+         response = (success) ? result.responseText : 0;
+     } else {
+         result.send();
+         response = result.responseText;
+     }
+     return response;
+ }
+ 
  Scene_Map.prototype.start = function() {
      Scene_Base.prototype.start.call(this);
      SceneManager.clearStack();
***************
*** 214,250 ****
  // Title Screen Switch Check
  //-----------------------------------------------------------------------------
  DataManager.writeToFile = function(text, filename) {
!     var fs = require('fs');
!     var dirPath = StorageManager.localFileDirectoryPath();
!     if (!fs.existsSync(dirPath)) {
!         fs.mkdirSync(dirPath);
!     }
!     // console.log("Writing File: " + filename + " Text: " + text);
!     fs.writeFileSync(dirPath + '/' + filename, text);
  }
  
  DataManager.writeToFileAsync = function(text, filename, callback) {
!     var fs = require('fs');
!     var dirPath = StorageManager.localFileDirectoryPath();
!     if (!fs.existsSync(dirPath)) {
!         fs.mkdirSync(dirPath);
!     }
!     // console.log("Writing File: " + filename + " Text: " + text);
!     //fs.writeFileSync(dirPath + '/' + filename, text);   
! 
!     fs.writeFile(dirPath + '/' + filename, text, (err) => {
!         if(!!callback) {callback()}
!     })
  }
  
  DataManager.readFromFile = function(filename) {
!     var fs = require('fs');
!     var dirPath = StorageManager.localFileDirectoryPath();
!     if (!fs.existsSync(dirPath + '/' + filename)) {
!         return 0;
      }
!     // console.log("Reading File: " + fs.readFileSync(dirPath + '/' + filename));
!     return fs.readFileSync(dirPath + '/' + filename, "utf-8");
  }
  
  Scene_OmoriFile.prototype.createWaitingWindow = function() {
--- 235,259 ----
  // Title Screen Switch Check
  //-----------------------------------------------------------------------------
  DataManager.writeToFile = function(text, filename) {
!     console.warn(filename + "IS BEING WRITTEN TO");
!     localStorage.setItem(filename, text);
  }
  
  DataManager.writeToFileAsync = function(text, filename, callback) {
!     console.warn(filename + "IS BEING WRITTEN TO");
!     localStorage.setItem(filename, text);
!     if(!!callback) {callback();}
  }
  
  DataManager.readFromFile = function(filename) {
!     let special = [ "TITLEDATA", "File" ];
!     if (special.contains(filename)) {
!         let data = localStorage.getItem(filename);
!         if (data === null) { return 0; }
!         return data;
      }
!     var dirPath = StorageManager.localFileDirectoryPath();
!     return readFileSync(dirPath + filename, true);
  }
  
  Scene_OmoriFile.prototype.createWaitingWindow = function() {
diff '--color=auto' -crbB a/www/js/rpg_core.js b/www/js/rpg_core.js
*** a/www/js/rpg_core.js	2022-06-11 11:31:38.000000000 -0500
--- b/www/js/rpg_core.js	2024-07-26 01:27:12.019324413 -0500
***************
*** 204,210 ****
   * @return {Boolean} True if the platform is NW.js
   */
  Utils.isNwjs = function() {
!     return typeof require === 'function' && typeof process === 'object';
  };
  
  /**
--- 204,210 ----
   * @return {Boolean} True if the platform is NW.js
   */
  Utils.isNwjs = function() {
!     return false;
  };
  
  /**
***************
*** 1679,1693 ****
      this._url = url;
      this._loadingState = 'requesting';
  
!     if(!Decrypter.checkImgIgnore(url) && Decrypter.hasEncryptedImages) {
          this._loadingState = 'decrypting';
          Decrypter.decryptImg(url, this);
!     } else {
!         this._image.src = url;
  
          this._image.addEventListener('load', this._loadListener = Bitmap.prototype._onLoad.bind(this));
          this._image.addEventListener('error', this._errorListener = this._loader || Bitmap.prototype._onError.bind(this));
!     }
  };
  
  Bitmap.prototype.isRequestOnly = function(){
--- 1679,1706 ----
      this._url = url;
      this._loadingState = 'requesting';
  
!     /*if(!Decrypter.checkImgIgnore(url) && Decrypter.hasEncryptedImages) {
          this._loadingState = 'decrypting';
          Decrypter.decryptImg(url, this);
!     } else {*/
!         let dir = url.split("/");
!         let file = dir.pop();
!         dir = dir.join("/");
! 
!         // check if already encoded
!         let decodedURI;
!         try {
!             decodedURI = decodeURIComponent(file);
!         } catch (e) {
!             decodedURI = "";
!         }
!         let alreadyEncoded = (decodedURI.length != 0 && decodedURI.length < file.length);
! 
!         this._image.src = (!alreadyEncoded && (url.contains("(") || url.contains(")"))) ? dir + "/" + encodeURIComponent(file) : url;
  
          this._image.addEventListener('load', this._loadListener = Bitmap.prototype._onLoad.bind(this));
          this._image.addEventListener('error', this._errorListener = this._loader || Bitmap.prototype._onError.bind(this));
!     //}
  };
  
  Bitmap.prototype.isRequestOnly = function(){
***************
*** 3204,3210 ****
   * @private
   */
  Input._wrapNwjsAlert = function() {
!     if (Utils.isNwjs()) {
          var _alert = window.alert;
          window.alert = function() {
              var gui = require('nw.gui');
--- 3217,3224 ----
   * @private
   */
  Input._wrapNwjsAlert = function() {
!     console.log("Input._wrapNwjsAlert called");
!     /*if (Utils.isNwjs()) {
          var _alert = window.alert;
          window.alert = function() {
              var gui = require('nw.gui');
***************
*** 3213,3219 ****
              win.focus();
              Input.clear();
          };
!     }
  };
  
  /**
--- 3227,3233 ----
              win.focus();
              Input.clear();
          };
!     }*/
  };
  
  /**
***************
*** 8163,8169 ****
  WebAudio.prototype._load = function(url) {
      if (WebAudio._context) {
          var xhr = new XMLHttpRequest();
!         if(Decrypter.hasEncryptedAudio) url = Decrypter.extToEncryptExt(url);
          xhr.open('GET', url);
          xhr.responseType = 'arraybuffer';
          xhr.onload = function() {
--- 8177,8183 ----
  WebAudio.prototype._load = function(url) {
      if (WebAudio._context) {
          var xhr = new XMLHttpRequest();
!         //if(Decrypter.hasEncryptedAudio) url = Decrypter.extToEncryptExt(url);
          xhr.open('GET', url);
          xhr.responseType = 'arraybuffer';
          xhr.onload = function() {
***************
*** 9217,9223 ****
  
  Decrypter.decryptArrayBuffer = function(arrayBuffer) {
      if (!arrayBuffer) return null;
!     var header = new Uint8Array(arrayBuffer, 0, this._headerlength);
  
      var i;
      var ref = this.SIGNATURE + this.VER + this.REMAIN;
--- 9231,9237 ----
  
  Decrypter.decryptArrayBuffer = function(arrayBuffer) {
      if (!arrayBuffer) return null;
!     /*var header = new Uint8Array(arrayBuffer, 0, this._headerlength);
  
      var i;
      var ref = this.SIGNATURE + this.VER + this.REMAIN;
***************
*** 9240,9246 ****
              byteArray[i] = byteArray[i] ^ parseInt(Decrypter._encryptionKey[i], 16);
              view.setUint8(i, byteArray[i]);
          }
!     }
  
      return arrayBuffer;
  };
--- 9254,9260 ----
              byteArray[i] = byteArray[i] ^ parseInt(Decrypter._encryptionKey[i], 16);
              view.setUint8(i, byteArray[i]);
          }
!     }*/
  
      return arrayBuffer;
  };
***************
*** 9254,9263 ****
      var ext = url.split('.').pop();
      var encryptedExt = ext;
  
!     if(ext === "ogg") encryptedExt = ".rpgmvo";
      else if(ext === "m4a") encryptedExt = ".rpgmvm";
      else if(ext === "png") encryptedExt = ".rpgmvp";
!     else encryptedExt = ext;
  
      return url.slice(0, url.lastIndexOf(ext) - 1) + encryptedExt;
  };
--- 9268,9278 ----
      var ext = url.split('.').pop();
      var encryptedExt = ext;
  
!     /*if(ext === "ogg") encryptedExt = ".rpgmvo";
      else if(ext === "m4a") encryptedExt = ".rpgmvm";
      else if(ext === "png") encryptedExt = ".rpgmvp";
!     else encryptedExt = ext;*/
!     encryptedExt = "." + ext;
  
      return url.slice(0, url.lastIndexOf(ext) - 1) + encryptedExt;
  };
diff '--color=auto' -crbB a/www/js/rpg_managers.js b/www/js/rpg_managers.js
*** a/www/js/rpg_managers.js	2022-06-11 11:31:44.000000000 -0500
--- b/www/js/rpg_managers.js	2024-07-28 22:34:02.354940676 -0500
***************
*** 7,14 ****
  //
  // The static class that manages the database and game objects.
  
  function DataManager() {
!     throw new Error('This is a static class');
  }
  
  var $dataActors       = null;
--- 7,21 ----
  //
  // The static class that manages the database and game objects.
  
+ function readFileSync(filename, options = {}) {
+   let result = new XMLHttpRequest();
+   result.open("GET", filename, false);
+   result.send();
+   return result.responseText;
+ }
+ 
  function DataManager() {
!   throw new Error("This is a static class");
  }
  
  var $dataActors = null;
***************
*** 42,100 ****
  var $gamePlayer       = null;
  var $testEvent        = null;
  
! DataManager._globalId       = 'RPGMV';
  DataManager._lastAccessedId = 1;
  DataManager._errorUrl       = null;
  
  DataManager._databaseFiles = [
!     { name: '$dataActors',       src: 'Actors.json'       },
!     { name: '$dataClasses',      src: 'Classes.json'      },
!     { name: '$dataSkills',       src: 'Skills.json'       },
!     { name: '$dataItems',        src: 'Items.json'        },
!     { name: '$dataWeapons',      src: 'Weapons.json'      },
!     { name: '$dataArmors',       src: 'Armors.json'       },
!     { name: '$dataEnemies',      src: 'Enemies.json'      },
!     { name: '$dataTroops',       src: 'Troops.json'       },
!     { name: '$dataStates',       src: 'States.json'       },
!     { name: '$dataAnimations',   src: 'Animations.json'   },
!     { name: '$dataTilesets',     src: 'Tilesets.json'     },
!     { name: '$dataCommonEvents', src: 'CommonEvents.json' },
!     { name: '$dataSystem',       src: 'System.json'       },
!     { name: '$dataMapInfos',     src: 'MapInfos.json'     }
  ];
  
! DataManager.loadDatabase = function() {
      var test = this.isBattleTest() || this.isEventTest();
!     var prefix = test ? 'Test_' : '';
      for (var i = 0; i < this._databaseFiles.length; i++) {
          var name = this._databaseFiles[i].name;
          var src = this._databaseFiles[i].src;
          this.loadDataFile(name, prefix + src);
      }
      if (this.isEventTest()) {
!         this.loadDataFile('$testEvent', prefix + 'Event.json');
      }
  };
  
! DataManager.loadDataFile = function(name, src) {
      var xhr = new XMLHttpRequest();
!     var url = 'data/' + src;
!     xhr.open('GET', url);
!     xhr.overrideMimeType('application/json');
!     xhr.onload = function() {
          if (xhr.status < 400) {
              window[name] = JSON.parse(xhr.responseText);
              DataManager.onLoad(window[name]);
          }
      };
!     xhr.onerror = this._mapLoader || function() {
          DataManager._errorUrl = DataManager._errorUrl || url;
      };
      window[name] = null;
      xhr.send();
  };
  
! DataManager.isDatabaseLoaded = function() {
      this.checkError();
      for (var i = 0; i < this._databaseFiles.length; i++) {
          if (!window[this._databaseFiles[i].name]) {
--- 49,109 ----
  var $gamePlayer = null;
  var $testEvent = null;
  
! DataManager._globalId = "RPGMV";
  DataManager._lastAccessedId = 1;
  DataManager._errorUrl = null;
  
  DataManager._databaseFiles = [
!   { name: "$dataActors", src: "Actors.json" },
!   { name: "$dataClasses", src: "Classes.json" },
!   { name: "$dataSkills", src: "Skills.json" },
!   { name: "$dataItems", src: "Items.json" },
!   { name: "$dataWeapons", src: "Weapons.json" },
!   { name: "$dataArmors", src: "Armors.json" },
!   { name: "$dataEnemies", src: "Enemies.json" },
!   { name: "$dataTroops", src: "Troops.json" },
!   { name: "$dataStates", src: "States.json" },
!   { name: "$dataAnimations", src: "Animations.json" },
!   { name: "$dataTilesets", src: "Tilesets.json" },
!   { name: "$dataCommonEvents", src: "CommonEvents.json" },
!   { name: "$dataSystem", src: "System.json" },
!   { name: "$dataMapInfos", src: "MapInfos.json" },
  ];
  
! DataManager.loadDatabase = function () {
    var test = this.isBattleTest() || this.isEventTest();
!   var prefix = test ? "Test_" : "";
    for (var i = 0; i < this._databaseFiles.length; i++) {
      var name = this._databaseFiles[i].name;
      var src = this._databaseFiles[i].src;
      this.loadDataFile(name, prefix + src);
    }
    if (this.isEventTest()) {
!     this.loadDataFile("$testEvent", prefix + "Event.json");
    }
  };
  
! DataManager.loadDataFile = function (name, src) {
    var xhr = new XMLHttpRequest();
!   var url = "data/" + src;
!   xhr.open("GET", url);
!   xhr.overrideMimeType("application/json");
!   xhr.onload = function () {
      if (xhr.status < 400) {
        window[name] = JSON.parse(xhr.responseText);
        DataManager.onLoad(window[name]);
      }
    };
!   xhr.onerror =
!     this._mapLoader ||
!     function () {
        DataManager._errorUrl = DataManager._errorUrl || url;
      };
    window[name] = null;
    xhr.send();
  };
  
! DataManager.isDatabaseLoaded = function () {
    this.checkError();
    for (var i = 0; i < this._databaseFiles.length; i++) {
      if (!window[this._databaseFiles[i].name]) {
***************
*** 104,120 ****
      return true;
  };
  
! DataManager.loadMapData = function(mapId) {
      if (mapId > 0) {
!         var filename = 'Map%1.json'.format(mapId.padZero(3));
!         this._mapLoader = ResourceHandler.createLoader('data/' + filename, this.loadDataFile.bind(this, '$dataMap', filename));
!         this.loadDataFile('$dataMap', filename);
      } else {
          this.makeEmptyMap();
      }
  };
  
! DataManager.makeEmptyMap = function() {
      $dataMap = {};
      $dataMap.data = [];
      $dataMap.events = [];
--- 113,132 ----
    return true;
  };
  
! DataManager.loadMapData = function (mapId) {
    if (mapId > 0) {
!     var filename = "Map%1.json".format(mapId.padZero(3));
!     this._mapLoader = ResourceHandler.createLoader(
!       "data/" + filename,
!       this.loadDataFile.bind(this, "$dataMap", filename),
!     );
!     this.loadDataFile("$dataMap", filename);
    } else {
      this.makeEmptyMap();
    }
  };
  
! DataManager.makeEmptyMap = function () {
    $dataMap = {};
    $dataMap.data = [];
    $dataMap.events = [];
***************
*** 123,134 ****
      $dataMap.scrollType = 3;
  };
  
! DataManager.isMapLoaded = function() {
      this.checkError();
      return !!$dataMap;
  };
  
! DataManager.onLoad = function(object) {
      var array;
      if (object === $dataMap) {
          this.extractMetadata(object);
--- 135,146 ----
    $dataMap.scrollType = 3;
  };
  
! DataManager.isMapLoaded = function () {
    this.checkError();
    return !!$dataMap;
  };
  
! DataManager.onLoad = function (object) {
    var array;
    if (object === $dataMap) {
      this.extractMetadata(object);
***************
*** 151,163 ****
      }
  };
  
! DataManager.extractMetadata = function(data) {
      var re = /<([^<>:]+)(:?)([^>]*)>/g;
      data.meta = {};
      for (;;) {
          var match = re.exec(data.note);
          if (match) {
!             if (match[2] === ':') {
                  data.meta[match[1]] = match[3];
              } else {
                  data.meta[match[1]] = true;
--- 163,175 ----
    }
  };
  
! DataManager.extractMetadata = function (data) {
    var re = /<([^<>:]+)(:?)([^>]*)>/g;
    data.meta = {};
    for (;;) {
      var match = re.exec(data.note);
      if (match) {
!       if (match[2] === ":") {
          data.meta[match[1]] = match[3];
        } else {
          data.meta[match[1]] = true;
***************
*** 168,204 ****
      }
  };
  
! DataManager.checkError = function() {
      if (DataManager._errorUrl) {
!         throw new Error('Failed to load: ' + DataManager._errorUrl);
      }
  };
  
! DataManager.isBattleTest = function() {
!     return Utils.isOptionValid('btest');
  };
  
! DataManager.isEventTest = function() {
!     return Utils.isOptionValid('etest');
  };
  
! DataManager.isSkill = function(item) {
      return item && $dataSkills.contains(item);
  };
  
! DataManager.isItem = function(item) {
      return item && $dataItems.contains(item);
  };
  
! DataManager.isWeapon = function(item) {
      return item && $dataWeapons.contains(item);
  };
  
! DataManager.isArmor = function(item) {
      return item && $dataArmors.contains(item);
  };
  
! DataManager.createGameObjects = function() {
      $gameTemp          = new Game_Temp();
      $gameSystem        = new Game_System();
      $gameScreen        = new Game_Screen();
--- 180,216 ----
    }
  };
  
! DataManager.checkError = function () {
    if (DataManager._errorUrl) {
!     throw new Error("Failed to load: " + DataManager._errorUrl);
    }
  };
  
! DataManager.isBattleTest = function () {
!   return Utils.isOptionValid("btest");
  };
  
! DataManager.isEventTest = function () {
!   return Utils.isOptionValid("etest");
  };
  
! DataManager.isSkill = function (item) {
    return item && $dataSkills.contains(item);
  };
  
! DataManager.isItem = function (item) {
    return item && $dataItems.contains(item);
  };
  
! DataManager.isWeapon = function (item) {
    return item && $dataWeapons.contains(item);
  };
  
! DataManager.isArmor = function (item) {
    return item && $dataArmors.contains(item);
  };
  
! DataManager.createGameObjects = function () {
    $gameTemp = new Game_Temp();
    $gameSystem = new Game_System();
    $gameScreen = new Game_Screen();
***************
*** 215,230 ****
      $gamePlayer        = new Game_Player();
  };
  
! DataManager.setupNewGame = function() {
      this.createGameObjects();
      this.selectSavefileForNewGame();
      $gameParty.setupStartingMembers();
!     $gamePlayer.reserveTransfer($dataSystem.startMapId,
!         $dataSystem.startX, $dataSystem.startY);
      Graphics.frameCount = 0;
  };
  
! DataManager.setupBattleTest = function() {
      this.createGameObjects();
      $gameParty.setupBattleTest();
      BattleManager.setup($dataSystem.testTroopId, true, false);
--- 227,245 ----
    $gamePlayer = new Game_Player();
  };
  
! DataManager.setupNewGame = function () {
    this.createGameObjects();
    this.selectSavefileForNewGame();
    $gameParty.setupStartingMembers();
!   $gamePlayer.reserveTransfer(
!     $dataSystem.startMapId,
!     $dataSystem.startX,
!     $dataSystem.startY,
!   );
    Graphics.frameCount = 0;
  };
  
! DataManager.setupBattleTest = function () {
    this.createGameObjects();
    $gameParty.setupBattleTest();
    BattleManager.setup($dataSystem.testTroopId, true, false);
***************
*** 232,238 ****
      BattleManager.playBattleBgm();
  };
  
! DataManager.setupEventTest = function() {
      this.createGameObjects();
      this.selectSavefileForNewGame();
      $gameParty.setupStartingMembers();
--- 247,253 ----
    BattleManager.playBattleBgm();
  };
  
! DataManager.setupEventTest = function () {
    this.createGameObjects();
    this.selectSavefileForNewGame();
    $gameParty.setupStartingMembers();
***************
*** 240,246 ****
      $gamePlayer.setTransparent(false);
  };
  
! DataManager.loadGlobalInfo = function() {
      var json;
      try {
          json = StorageManager.load(0);
--- 255,261 ----
    $gamePlayer.setTransparent(false);
  };
  
! DataManager.loadGlobalInfo = function () {
    var json;
    try {
      json = StorageManager.load(0);
***************
*** 261,286 ****
      }
  };
  
! DataManager.saveGlobalInfo = function(info) {
      StorageManager.save(0, JSON.stringify(info));
  };
  
! DataManager.isThisGameFile = function(savefileId) {
      var globalInfo = this.loadGlobalInfo();
      if (globalInfo && globalInfo[savefileId]) {
          if (StorageManager.isLocalMode()) {
              return true;
          } else {
              var savefile = globalInfo[savefileId];
!             return (savefile.globalId === this._globalId &&
!                     savefile.title === $dataSystem.gameTitle);
          }
      } else {
          return false;
      }
  };
  
! DataManager.isAnySavefileExists = function() {
      var globalInfo = this.loadGlobalInfo();
      if (globalInfo) {
          for (var i = 1; i < globalInfo.length; i++) {
--- 276,303 ----
    }
  };
  
! DataManager.saveGlobalInfo = function (info) {
    StorageManager.save(0, JSON.stringify(info));
  };
  
! DataManager.isThisGameFile = function (savefileId) {
    var globalInfo = this.loadGlobalInfo();
    if (globalInfo && globalInfo[savefileId]) {
      if (StorageManager.isLocalMode()) {
        return true;
      } else {
        var savefile = globalInfo[savefileId];
!       return (
!         savefile.globalId === this._globalId &&
!         savefile.title === $dataSystem.gameTitle
!       );
      }
    } else {
      return false;
    }
  };
  
! DataManager.isAnySavefileExists = function () {
    var globalInfo = this.loadGlobalInfo();
    if (globalInfo) {
      for (var i = 1; i < globalInfo.length; i++) {
***************
*** 292,298 ****
      return false;
  };
  
! DataManager.latestSavefileId = function() {
      var globalInfo = this.loadGlobalInfo();
      var savefileId = 1;
      var timestamp = 0;
--- 309,315 ----
    return false;
  };
  
! DataManager.latestSavefileId = function () {
    var globalInfo = this.loadGlobalInfo();
    var savefileId = 1;
    var timestamp = 0;
***************
*** 307,313 ****
      return savefileId;
  };
  
! DataManager.loadAllSavefileImages = function() {
      var globalInfo = this.loadGlobalInfo();
      if (globalInfo) {
          for (var i = 1; i < globalInfo.length; i++) {
--- 324,330 ----
    return savefileId;
  };
  
! DataManager.loadAllSavefileImages = function () {
    var globalInfo = this.loadGlobalInfo();
    if (globalInfo) {
      for (var i = 1; i < globalInfo.length; i++) {
***************
*** 319,325 ****
      }
  };
  
! DataManager.loadSavefileImages = function(info) {
      if (info.characters) {
          for (var i = 0; i < info.characters.length; i++) {
              ImageManager.reserveCharacter(info.characters[i][0]);
--- 336,342 ----
    }
  };
  
! DataManager.loadSavefileImages = function (info) {
    if (info.characters) {
      for (var i = 0; i < info.characters.length; i++) {
        ImageManager.reserveCharacter(info.characters[i][0]);
***************
*** 332,342 ****
      }
  };
  
! DataManager.maxSavefiles = function() {
      return 20;
  };
  
! DataManager.saveGame = function(savefileId) {
      try {
          StorageManager.backup(savefileId);
          return this.saveGameWithoutRescue(savefileId);
--- 349,359 ----
    }
  };
  
! DataManager.maxSavefiles = function () {
    return 20;
  };
  
! DataManager.saveGame = function (savefileId) {
    try {
      StorageManager.backup(savefileId);
      return this.saveGameWithoutRescue(savefileId);
***************
*** 345,357 ****
          try {
              StorageManager.remove(savefileId);
              StorageManager.restoreBackup(savefileId);
!         } catch (e2) {
!         }
          return false;
      }
  };
  
! DataManager.loadGame = function(savefileId) {
      try {
          return this.loadGameWithoutRescue(savefileId);
      } catch (e) {
--- 362,373 ----
      try {
        StorageManager.remove(savefileId);
        StorageManager.restoreBackup(savefileId);
!     } catch (e2) {}
      return false;
    }
  };
  
! DataManager.loadGame = function (savefileId) {
    try {
      return this.loadGameWithoutRescue(savefileId);
    } catch (e) {
***************
*** 360,378 ****
      }
  };
  
! DataManager.loadSavefileInfo = function(savefileId) {
      var globalInfo = this.loadGlobalInfo();
!     return (globalInfo && globalInfo[savefileId]) ? globalInfo[savefileId] : null;
  };
  
! DataManager.lastAccessedSavefileId = function() {
      return this._lastAccessedId;
  };
  
! DataManager.saveGameWithoutRescue = function(savefileId) {
      var json = JsonEx.stringify(this.makeSaveContents());
      if (json.length >= 200000) {
!         console.warn('Save data too big!');
      }
      StorageManager.save(savefileId, json);
      this._lastAccessedId = savefileId;
--- 376,394 ----
    }
  };
  
! DataManager.loadSavefileInfo = function (savefileId) {
    var globalInfo = this.loadGlobalInfo();
!   return globalInfo && globalInfo[savefileId] ? globalInfo[savefileId] : null;
  };
  
! DataManager.lastAccessedSavefileId = function () {
    return this._lastAccessedId;
  };
  
! DataManager.saveGameWithoutRescue = function (savefileId) {
    var json = JsonEx.stringify(this.makeSaveContents());
    if (json.length >= 200000) {
!     console.warn("Save data too big!");
    }
    StorageManager.save(savefileId, json);
    this._lastAccessedId = savefileId;
***************
*** 382,388 ****
      return true;
  };
  
! DataManager.loadGameWithoutRescue = function(savefileId) {
      var globalInfo = this.loadGlobalInfo();
      if (this.isThisGameFile(savefileId)) {
          var json = StorageManager.load(savefileId);
--- 398,404 ----
    return true;
  };
  
! DataManager.loadGameWithoutRescue = function (savefileId) {
    var globalInfo = this.loadGlobalInfo();
    if (this.isThisGameFile(savefileId)) {
      var json = StorageManager.load(savefileId);
***************
*** 395,401 ****
      }
  };
  
! DataManager.selectSavefileForNewGame = function() {
      var globalInfo = this.loadGlobalInfo();
      this._lastAccessedId = 1;
      if (globalInfo) {
--- 411,417 ----
    }
  };
  
! DataManager.selectSavefileForNewGame = function () {
    var globalInfo = this.loadGlobalInfo();
    this._lastAccessedId = 1;
    if (globalInfo) {
***************
*** 418,424 ****
      }
  };
  
! DataManager.makeSavefileInfo = function() {
      var info = {};
      info.globalId   = this._globalId;
      info.title      = $dataSystem.gameTitle;
--- 434,440 ----
    }
  };
  
! DataManager.makeSavefileInfo = function () {
    var info = {};
    info.globalId = this._globalId;
    info.title = $dataSystem.gameTitle;
***************
*** 429,435 ****
      return info;
  };
  
! DataManager.makeSaveContents = function() {
      // A save data does not contain $gameTemp, $gameMessage, and $gameTroop.
      var contents = {};
      contents.system       = $gameSystem;
--- 445,451 ----
    return info;
  };
  
! DataManager.makeSaveContents = function () {
    // A save data does not contain $gameTemp, $gameMessage, and $gameTroop.
    var contents = {};
    contents.system = $gameSystem;
***************
*** 446,452 ****
      return contents;
  };
  
! DataManager.extractSaveContents = function(contents) {
      $gameSystem        = contents.system;
      $gameScreen        = contents.screen;
      $gameTimer         = contents.timer;
--- 462,468 ----
    return contents;
  };
  
! DataManager.extractSaveContents = function (contents) {
    $gameSystem = contents.system;
    $gameScreen = contents.screen;
    $gameTimer = contents.timer;
***************
*** 466,518 ****
  // The static class that manages the configuration data.
  
  function ConfigManager() {
!     throw new Error('This is a static class');
  }
  
  ConfigManager.alwaysDash        = false;
  ConfigManager.commandRemember   = false;
  
! Object.defineProperty(ConfigManager, 'bgmVolume', {
!     get: function() {
          return AudioManager._bgmVolume;
      },
!     set: function(value) {
          AudioManager.bgmVolume = value;
      },
!     configurable: true
  });
  
! Object.defineProperty(ConfigManager, 'bgsVolume', {
!     get: function() {
          return AudioManager.bgsVolume;
      },
!     set: function(value) {
          AudioManager.bgsVolume = value;
      },
!     configurable: true
  });
  
! Object.defineProperty(ConfigManager, 'meVolume', {
!     get: function() {
          return AudioManager.meVolume;
      },
!     set: function(value) {
          AudioManager.meVolume = value;
      },
!     configurable: true
  });
  
! Object.defineProperty(ConfigManager, 'seVolume', {
!     get: function() {
          return AudioManager.seVolume;
      },
!     set: function(value) {
          AudioManager.seVolume = value;
      },
!     configurable: true
  });
  
! ConfigManager.load = function() {
      var json;
      var config = {};
      try {
--- 482,534 ----
  // The static class that manages the configuration data.
  
  function ConfigManager() {
!   throw new Error("This is a static class");
  }
  
  ConfigManager.alwaysDash = false;
  ConfigManager.commandRemember = false;
  
! Object.defineProperty(ConfigManager, "bgmVolume", {
!   get: function () {
      return AudioManager._bgmVolume;
    },
!   set: function (value) {
      AudioManager.bgmVolume = value;
    },
!   configurable: true,
  });
  
! Object.defineProperty(ConfigManager, "bgsVolume", {
!   get: function () {
      return AudioManager.bgsVolume;
    },
!   set: function (value) {
      AudioManager.bgsVolume = value;
    },
!   configurable: true,
  });
  
! Object.defineProperty(ConfigManager, "meVolume", {
!   get: function () {
      return AudioManager.meVolume;
    },
!   set: function (value) {
      AudioManager.meVolume = value;
    },
!   configurable: true,
  });
  
! Object.defineProperty(ConfigManager, "seVolume", {
!   get: function () {
      return AudioManager.seVolume;
    },
!   set: function (value) {
      AudioManager.seVolume = value;
    },
!   configurable: true,
  });
  
! ConfigManager.load = function () {
    var json;
    var config = {};
    try {
***************
*** 526,536 ****
      this.applyData(config);
  };
  
! ConfigManager.save = function() {
      StorageManager.save(-1, JSON.stringify(this.makeData()));
  };
  
! ConfigManager.makeData = function() {
      var config = {};
      config.alwaysDash = this.alwaysDash;
      config.commandRemember = this.commandRemember;
--- 542,552 ----
    this.applyData(config);
  };
  
! ConfigManager.save = function () {
    StorageManager.save(-1, JSON.stringify(this.makeData()));
  };
  
! ConfigManager.makeData = function () {
    var config = {};
    config.alwaysDash = this.alwaysDash;
    config.commandRemember = this.commandRemember;
***************
*** 541,560 ****
      return config;
  };
  
! ConfigManager.applyData = function(config) {
!     this.alwaysDash = this.readFlag(config, 'alwaysDash');
!     this.commandRemember = this.readFlag(config, 'commandRemember');
!     this.bgmVolume = this.readVolume(config, 'bgmVolume');
!     this.bgsVolume = this.readVolume(config, 'bgsVolume');
!     this.meVolume = this.readVolume(config, 'meVolume');
!     this.seVolume = this.readVolume(config, 'seVolume');
  };
  
! ConfigManager.readFlag = function(config, name) {
      return !!config[name];
  };
  
! ConfigManager.readVolume = function(config, name) {
      var value = config[name];
      if (value !== undefined) {
          return Number(value).clamp(0, 100);
--- 557,576 ----
    return config;
  };
  
! ConfigManager.applyData = function (config) {
!   this.alwaysDash = this.readFlag(config, "alwaysDash");
!   this.commandRemember = this.readFlag(config, "commandRemember");
!   this.bgmVolume = this.readVolume(config, "bgmVolume");
!   this.bgsVolume = this.readVolume(config, "bgsVolume");
!   this.meVolume = this.readVolume(config, "meVolume");
!   this.seVolume = this.readVolume(config, "seVolume");
  };
  
! ConfigManager.readFlag = function (config, name) {
    return !!config[name];
  };
  
! ConfigManager.readVolume = function (config, name) {
    var value = config[name];
    if (value !== undefined) {
      return Number(value).clamp(0, 100);
***************
*** 569,787 ****
  // The static class that manages storage for saving game data.
  
  function StorageManager() {
!     throw new Error('This is a static class');
  }
  
! StorageManager.save = function(savefileId, json) {
!     if (this.isLocalMode()) {
!         this.saveToLocalFile(savefileId, json);
!     } else {
          this.saveToWebStorage(savefileId, json);
-     }
  };
  
! StorageManager.load = function(savefileId) {
!     if (this.isLocalMode()) {
!         return this.loadFromLocalFile(savefileId);
!     } else {
          return this.loadFromWebStorage(savefileId);
-     }
  };
  
! StorageManager.exists = function(savefileId) {
!     if (this.isLocalMode()) {
!         return this.localFileExists(savefileId);
!     } else {
          return this.webStorageExists(savefileId);
-     }
  };
  
! StorageManager.remove = function(savefileId) {
!     if (this.isLocalMode()) {
!         this.removeLocalFile(savefileId);
!     } else {
          this.removeWebStorage(savefileId);
-     }
  };
  
! StorageManager.backup = function(savefileId) {
      if (this.exists(savefileId)) {
-         if (this.isLocalMode()) {
-             var data = this.loadFromLocalFile(savefileId);
-             var compressed = LZString.compressToBase64(data);
-             var fs = require('fs');
-             var dirPath = this.localFileDirectoryPath();
-             var filePath = this.localFilePath(savefileId) + ".bak";
-             if (!fs.existsSync(dirPath)) {
-                 fs.mkdirSync(dirPath);
-             }
-             fs.writeFileSync(filePath, compressed);
-         } else {
              var data = this.loadFromWebStorage(savefileId);
              var compressed = LZString.compressToBase64(data);
              var key = this.webStorageKey(savefileId) + "bak";
              localStorage.setItem(key, compressed);
          }
-     }
  };
  
! StorageManager.backupExists = function(savefileId) {
!     if (this.isLocalMode()) {
!         return this.localFileBackupExists(savefileId);
!     } else {
          return this.webStorageBackupExists(savefileId);
-     }
  };
  
! StorageManager.cleanBackup = function(savefileId) {
  	if (this.backupExists(savefileId)) {
- 		if (this.isLocalMode()) {
- 			var fs = require('fs');
-             var dirPath = this.localFileDirectoryPath();
-             var filePath = this.localFilePath(savefileId);
-             fs.unlinkSync(filePath + ".bak");
- 		} else {
  		    var key = this.webStorageKey(savefileId);
  			localStorage.removeItem(key + "bak");
  		}
- 	}
  };
  
! StorageManager.restoreBackup = function(savefileId) {
      if (this.backupExists(savefileId)) {
-         if (this.isLocalMode()) {
-             var data = this.loadFromLocalBackupFile(savefileId);
-             var compressed = LZString.compressToBase64(data);
-             var fs = require('fs');
-             var dirPath = this.localFileDirectoryPath();
-             var filePath = this.localFilePath(savefileId);
-             if (!fs.existsSync(dirPath)) {
-                 fs.mkdirSync(dirPath);
-             }
-             fs.writeFileSync(filePath, compressed);
-             fs.unlinkSync(filePath + ".bak");
-         } else {
              var data = this.loadFromWebStorageBackup(savefileId);
              var compressed = LZString.compressToBase64(data);
              var key = this.webStorageKey(savefileId);
              localStorage.setItem(key, compressed);
              localStorage.removeItem(key + "bak");
          }
-     }
  };
  
! StorageManager.isLocalMode = function() {
!     return Utils.isNwjs();
  };
! 
! StorageManager.saveToLocalFile = function(savefileId, json) {
!     var data = LZString.compressToBase64(json);
!     var fs = require('fs');
!     var dirPath = this.localFileDirectoryPath();
!     var filePath = this.localFilePath(savefileId);
!     if (!fs.existsSync(dirPath)) {
!         fs.mkdirSync(dirPath);
!     }
!     fs.writeFileSync(filePath, data);
  };
  
! StorageManager.loadFromLocalFile = function(savefileId) {
!     var data = null;
!     var fs = require('fs');
!     var filePath = this.localFilePath(savefileId);
!     if (fs.existsSync(filePath)) {
!         data = fs.readFileSync(filePath, { encoding: 'utf8' });
!     }
!     return LZString.decompressFromBase64(data);
  };
  
! StorageManager.loadFromLocalBackupFile = function(savefileId) {
!     var data = null;
!     var fs = require('fs');
!     var filePath = this.localFilePath(savefileId) + ".bak";
!     if (fs.existsSync(filePath)) {
!         data = fs.readFileSync(filePath, { encoding: 'utf8' });
!     }
!     return LZString.decompressFromBase64(data);
  };
  
! StorageManager.localFileBackupExists = function(savefileId) {
!     var fs = require('fs');
!     return fs.existsSync(this.localFilePath(savefileId) + ".bak");
  };
  
! StorageManager.localFileExists = function(savefileId) {
!     var fs = require('fs');
!     return fs.existsSync(this.localFilePath(savefileId));
  };
  
! StorageManager.removeLocalFile = function(savefileId) {
!     var fs = require('fs');
!     var filePath = this.localFilePath(savefileId);
!     if (fs.existsSync(filePath)) {
!         fs.unlinkSync(filePath);
!     }
  };
  
! StorageManager.saveToWebStorage = function(savefileId, json) {
      var key = this.webStorageKey(savefileId);
      var data = LZString.compressToBase64(json);
      localStorage.setItem(key, data);
  };
  
! StorageManager.loadFromWebStorage = function(savefileId) {
      var key = this.webStorageKey(savefileId);
      var data = localStorage.getItem(key);
      return LZString.decompressFromBase64(data);
  };
  
! StorageManager.loadFromWebStorageBackup = function(savefileId) {
      var key = this.webStorageKey(savefileId) + "bak";
      var data = localStorage.getItem(key);
      return LZString.decompressFromBase64(data);
  };
  
! StorageManager.webStorageBackupExists = function(savefileId) {
      var key = this.webStorageKey(savefileId) + "bak";
      return !!localStorage.getItem(key);
  };
  
! StorageManager.webStorageExists = function(savefileId) {
      var key = this.webStorageKey(savefileId);
      return !!localStorage.getItem(key);
  };
  
! StorageManager.removeWebStorage = function(savefileId) {
      var key = this.webStorageKey(savefileId);
      localStorage.removeItem(key);
  };
  
! StorageManager.localFileDirectoryPath = function() {
!     var path = require('path');
! 
!     var base = path.dirname(process.mainModule.filename);
!     return path.join(base, 'save/');
  };
  
! StorageManager.localFilePath = function(savefileId) {
      var name;
      if (savefileId < 0) {
!         name = 'config.rpgsave';
      } else if (savefileId === 0) {
!         name = 'global.rpgsave';
      } else {
!         name = 'file%1.rpgsave'.format(savefileId);
      }
      return this.localFileDirectoryPath() + name;
  };
  
! StorageManager.webStorageKey = function(savefileId) {
      if (savefileId < 0) {
!         return 'RPG Config';
      } else if (savefileId === 0) {
!         return 'RPG Global';
      } else {
!         return 'RPG File%1'.format(savefileId);
      }
  };
  
--- 585,723 ----
  // The static class that manages storage for saving game data.
  
  function StorageManager() {
!   throw new Error("This is a static class");
  }
  
! StorageManager.save = function (savefileId, json) {
    this.saveToWebStorage(savefileId, json);
  };
  
! StorageManager.load = function (savefileId) {
    return this.loadFromWebStorage(savefileId);
  };
  
! StorageManager.exists = function (savefileId) {
    return this.webStorageExists(savefileId);
  };
  
! StorageManager.remove = function (savefileId) {
    this.removeWebStorage(savefileId);
  };
  
! StorageManager.backup = function (savefileId) {
    if (this.exists(savefileId)) {
      var data = this.loadFromWebStorage(savefileId);
      var compressed = LZString.compressToBase64(data);
      var key = this.webStorageKey(savefileId) + "bak";
      localStorage.setItem(key, compressed);
    }
  };
  
! StorageManager.backupExists = function (savefileId) {
    return this.webStorageBackupExists(savefileId);
  };
  
! StorageManager.cleanBackup = function (savefileId) {
    if (this.backupExists(savefileId)) {
      var key = this.webStorageKey(savefileId);
      localStorage.removeItem(key + "bak");
    }
  };
  
! StorageManager.restoreBackup = function (savefileId) {
    if (this.backupExists(savefileId)) {
      var data = this.loadFromWebStorageBackup(savefileId);
      var compressed = LZString.compressToBase64(data);
      var key = this.webStorageKey(savefileId);
      localStorage.setItem(key, compressed);
      localStorage.removeItem(key + "bak");
    }
  };
  
! StorageManager.isLocalMode = function () {
!   return false;
  };
! StorageManager.saveToLocalFile = function (savefileId, json) {
!   this.saveToWebStorage(savefileId, json);
  };
  
! StorageManager.loadFromLocalFile = function (savefileId) {
!   return this.loadFromWebStorage(savefileId);
  };
  
! StorageManager.loadFromLocalBackupFile = function (savefileId) {
!   return this.loadFromWebStorageBackup(savefileId);
  };
  
! StorageManager.localFileBackupExists = function (savefileId) {
!   return this.webStorageBackupExists();
  };
  
! StorageManager.localFileExists = function (savefileId) {
!   return this.webStorageExists();
  };
  
! StorageManager.removeLocalFile = function (savefileId) {
!   this.removeWebStorage(savefileId);
  };
  
! StorageManager.saveToWebStorage = function (savefileId, json) {
    var key = this.webStorageKey(savefileId);
    var data = LZString.compressToBase64(json);
    localStorage.setItem(key, data);
  };
  
! StorageManager.loadFromWebStorage = function (savefileId) {
    var key = this.webStorageKey(savefileId);
    var data = localStorage.getItem(key);
    return LZString.decompressFromBase64(data);
  };
  
! StorageManager.loadFromWebStorageBackup = function (savefileId) {
    var key = this.webStorageKey(savefileId) + "bak";
    var data = localStorage.getItem(key);
    return LZString.decompressFromBase64(data);
  };
  
! StorageManager.webStorageBackupExists = function (savefileId) {
    var key = this.webStorageKey(savefileId) + "bak";
    return !!localStorage.getItem(key);
  };
  
! StorageManager.webStorageExists = function (savefileId) {
    var key = this.webStorageKey(savefileId);
    return !!localStorage.getItem(key);
  };
  
! StorageManager.removeWebStorage = function (savefileId) {
    var key = this.webStorageKey(savefileId);
    localStorage.removeItem(key);
  };
  
! StorageManager.localFileDirectoryPath = function () {
!   var base = window.location.origin;
!   return base + "/save/";
  };
  
! StorageManager.localFilePath = function (savefileId) {
    var name;
    if (savefileId < 0) {
!     name = "config.rpgsave";
    } else if (savefileId === 0) {
!     name = "global.rpgsave";
    } else {
!     name = "file%1.rpgsave".format(savefileId);
    }
    return this.localFileDirectoryPath() + name;
  };
  
! StorageManager.webStorageKey = function (savefileId) {
    if (savefileId < 0) {
!     return "RPG Config";
    } else if (savefileId === 0) {
!     return "RPG Global";
    } else {
!     return "RPG File%1".format(savefileId);
    }
  };
  
***************
*** 791,797 ****
  // The static class that loads images, creates bitmap objects and retains them.
  
  function ImageManager() {
!     throw new Error('This is a static class');
  }
  
  ImageManager.cache = new CacheMap(ImageManager);
--- 727,733 ----
  // The static class that loads images, creates bitmap objects and retains them.
  
  function ImageManager() {
!   throw new Error("This is a static class");
  }
  
  ImageManager.cache = new CacheMap(ImageManager);
***************
*** 800,868 ****
  ImageManager._requestQueue = new RequestQueue();
  ImageManager._systemReservationId = Utils.generateRuntimeId();
  
! ImageManager._generateCacheKey = function(path, hue){
!     return  path + ':' + hue;
  };
  
! ImageManager.loadAnimation = function(filename, hue) {
!     return this.loadBitmap('img/animations/', filename, hue, true);
  };
  
! ImageManager.loadBattleback1 = function(filename, hue) {
!     return this.loadBitmap('img/battlebacks1/', filename, hue, true);
  };
  
! ImageManager.loadBattleback2 = function(filename, hue) {
!     return this.loadBitmap('img/battlebacks2/', filename, hue, true);
  };
  
! ImageManager.loadEnemy = function(filename, hue) {
!     return this.loadBitmap('img/enemies/', filename, hue, true);
  };
  
! ImageManager.loadCharacter = function(filename, hue) {
!     return this.loadBitmap('img/characters/', filename, hue, false);
  };
  
! ImageManager.loadFace = function(filename, hue) {
!     return this.loadBitmap('img/faces/', filename, hue, true);
  };
  
! ImageManager.loadParallax = function(filename, hue) {
!     return this.loadBitmap('img/parallaxes/', filename, hue, true);
  };
  
! ImageManager.loadPicture = function(filename, hue) {
!     return this.loadBitmap('img/pictures/', filename, hue, true);
  };
  
! ImageManager.loadSvActor = function(filename, hue) {
!     return this.loadBitmap('img/sv_actors/', filename, hue, false);
  };
  
! ImageManager.loadSvEnemy = function(filename, hue) {
!     return this.loadBitmap('img/sv_enemies/', filename, hue, true);
  };
  
! ImageManager.loadSystem = function(filename, hue) {
!     return this.loadBitmap('img/system/', filename, hue, false);
  };
  
! ImageManager.loadTileset = function(filename, hue) {
!     return this.loadBitmap('img/tilesets/', filename, hue, false);
  };
  
! ImageManager.loadTitle1 = function(filename, hue) {
!     return this.loadBitmap('img/titles1/', filename, hue, true);
  };
  
! ImageManager.loadTitle2 = function(filename, hue) {
!     return this.loadBitmap('img/titles2/', filename, hue, true);
  };
  
! ImageManager.loadBitmap = function(folder, filename, hue, smooth) {
      if (filename) {
!         var path = folder + encodeURIComponent(filename) + '.png';
          var bitmap = this.loadNormalBitmap(path, hue || 0);
          bitmap.smooth = smooth;
          return bitmap;
--- 736,804 ----
  ImageManager._requestQueue = new RequestQueue();
  ImageManager._systemReservationId = Utils.generateRuntimeId();
  
! ImageManager._generateCacheKey = function (path, hue) {
!   return path + ":" + hue;
  };
  
! ImageManager.loadAnimation = function (filename, hue) {
!   return this.loadBitmap("img/animations/", filename, hue, true);
  };
  
! ImageManager.loadBattleback1 = function (filename, hue) {
!   return this.loadBitmap("img/battlebacks1/", filename, hue, true);
  };
  
! ImageManager.loadBattleback2 = function (filename, hue) {
!   return this.loadBitmap("img/battlebacks2/", filename, hue, true);
  };
  
! ImageManager.loadEnemy = function (filename, hue) {
!   return this.loadBitmap("img/enemies/", filename, hue, true);
  };
  
! ImageManager.loadCharacter = function (filename, hue) {
!   return this.loadBitmap("img/characters/", filename, hue, false);
  };
  
! ImageManager.loadFace = function (filename, hue) {
!   return this.loadBitmap("img/faces/", filename, hue, true);
  };
  
! ImageManager.loadParallax = function (filename, hue) {
!   return this.loadBitmap("img/parallaxes/", filename, hue, true);
  };
  
! ImageManager.loadPicture = function (filename, hue) {
!   return this.loadBitmap("img/pictures/", filename, hue, true);
  };
  
! ImageManager.loadSvActor = function (filename, hue) {
!   return this.loadBitmap("img/sv_actors/", filename, hue, false);
  };
  
! ImageManager.loadSvEnemy = function (filename, hue) {
!   return this.loadBitmap("img/sv_enemies/", filename, hue, true);
  };
  
! ImageManager.loadSystem = function (filename, hue) {
!   return this.loadBitmap("img/system/", filename, hue, false);
  };
  
! ImageManager.loadTileset = function (filename, hue) {
!   return this.loadBitmap("img/tilesets/", filename, hue, false);
  };
  
! ImageManager.loadTitle1 = function (filename, hue) {
!   return this.loadBitmap("img/titles1/", filename, hue, true);
  };
  
! ImageManager.loadTitle2 = function (filename, hue) {
!   return this.loadBitmap("img/titles2/", filename, hue, true);
  };
  
! ImageManager.loadBitmap = function (folder, filename, hue, smooth) {
    if (filename) {
!     var path = folder + encodeURIComponent(filename) + ".png";
      var bitmap = this.loadNormalBitmap(path, hue || 0);
      bitmap.smooth = smooth;
      return bitmap;
***************
*** 871,986 ****
      }
  };
  
! ImageManager.loadEmptyBitmap = function() {
!     var empty = this._imageCache.get('empty');
!     if(!empty){
          empty = new Bitmap();
!         this._imageCache.add('empty', empty);
!         this._imageCache.reserve('empty', empty, this._systemReservationId);
      }
  
      return empty;
  };
  
! ImageManager.loadNormalBitmap = function(path, hue) {
      var key = this._generateCacheKey(path, hue);
      var bitmap = this._imageCache.get(key);
      if (!bitmap) {
          bitmap = Bitmap.load(decodeURIComponent(path));
!         bitmap.addLoadListener(function() {
              bitmap.rotateHue(hue);
          });
          this._imageCache.add(key, bitmap);
!     }else if(!bitmap.isReady()){
          bitmap.decode();
      }
  
      return bitmap;
  };
  
! ImageManager.clear = function() {
      this._imageCache = new ImageCache();
  };
  
! ImageManager.isReady = function() {
      return this._imageCache.isReady();
  };
  
! ImageManager.isObjectCharacter = function(filename) {
      var sign = filename.match(/^[\!\$]+/);
!     return sign && sign[0].contains('!');
  };
  
! ImageManager.isBigCharacter = function(filename) {
      var sign = filename.match(/^[\!\$]+/);
!     return sign && sign[0].contains('$');
! };
! 
! ImageManager.isZeroParallax = function(filename) {
!     return filename.charAt(0) === '!';
! };
! 
! 
! ImageManager.reserveAnimation = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/animations/', filename, hue, true, reservationId);
  };
  
! ImageManager.reserveBattleback1 = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/battlebacks1/', filename, hue, true, reservationId);
  };
  
! ImageManager.reserveBattleback2 = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/battlebacks2/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveEnemy = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/enemies/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveCharacter = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/characters/', filename, hue, false, reservationId);
! };
! 
! ImageManager.reserveFace = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/faces/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveParallax = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/parallaxes/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reservePicture = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/pictures/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveSvActor = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/sv_actors/', filename, hue, false, reservationId);
! };
! 
! ImageManager.reserveSvEnemy = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/sv_enemies/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveSystem = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/system/', filename, hue, false, reservationId || this._systemReservationId);
! };
! 
! ImageManager.reserveTileset = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/tilesets/', filename, hue, false, reservationId);
! };
! 
! ImageManager.reserveTitle1 = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/titles1/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveTitle2 = function(filename, hue, reservationId) {
!     return this.reserveBitmap('img/titles2/', filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveBitmap = function(folder, filename, hue, smooth, reservationId) {
      if (filename) {
!         var path = folder + encodeURIComponent(filename) + '.png';
!         var bitmap = this.reserveNormalBitmap(path, hue || 0, reservationId || this._defaultReservationId);
          bitmap.smooth = smooth;
          return bitmap;
      } else {
--- 807,991 ----
    }
  };
  
! ImageManager.loadEmptyBitmap = function () {
!   var empty = this._imageCache.get("empty");
!   if (!empty) {
      empty = new Bitmap();
!     this._imageCache.add("empty", empty);
!     this._imageCache.reserve("empty", empty, this._systemReservationId);
    }
  
    return empty;
  };
  
! ImageManager.loadNormalBitmap = function (path, hue) {
    var key = this._generateCacheKey(path, hue);
    var bitmap = this._imageCache.get(key);
    if (!bitmap) {
      bitmap = Bitmap.load(decodeURIComponent(path));
!     bitmap.addLoadListener(function () {
        bitmap.rotateHue(hue);
      });
      this._imageCache.add(key, bitmap);
!   } else if (!bitmap.isReady()) {
      bitmap.decode();
    }
  
    return bitmap;
  };
  
! ImageManager.clear = function () {
    this._imageCache = new ImageCache();
  };
  
! ImageManager.isReady = function () {
    return this._imageCache.isReady();
  };
  
! ImageManager.isObjectCharacter = function (filename) {
    var sign = filename.match(/^[\!\$]+/);
!   return sign && sign[0].contains("!");
  };
  
! ImageManager.isBigCharacter = function (filename) {
    var sign = filename.match(/^[\!\$]+/);
!   return sign && sign[0].contains("$");
  };
  
! ImageManager.isZeroParallax = function (filename) {
!   return filename.charAt(0) === "!";
  };
  
! ImageManager.reserveAnimation = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/animations/",
!     filename,
!     hue,
!     true,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveBattleback1 = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/battlebacks1/",
!     filename,
!     hue,
!     true,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveBattleback2 = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/battlebacks2/",
!     filename,
!     hue,
!     true,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveEnemy = function (filename, hue, reservationId) {
!   return this.reserveBitmap("img/enemies/", filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveCharacter = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/characters/",
!     filename,
!     hue,
!     false,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveFace = function (filename, hue, reservationId) {
!   return this.reserveBitmap("img/faces/", filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveParallax = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/parallaxes/",
!     filename,
!     hue,
!     true,
!     reservationId,
!   );
! };
! 
! ImageManager.reservePicture = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/pictures/",
!     filename,
!     hue,
!     true,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveSvActor = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/sv_actors/",
!     filename,
!     hue,
!     false,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveSvEnemy = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/sv_enemies/",
!     filename,
!     hue,
!     true,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveSystem = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/system/",
!     filename,
!     hue,
!     false,
!     reservationId || this._systemReservationId,
!   );
! };
! 
! ImageManager.reserveTileset = function (filename, hue, reservationId) {
!   return this.reserveBitmap(
!     "img/tilesets/",
!     filename,
!     hue,
!     false,
!     reservationId,
!   );
! };
! 
! ImageManager.reserveTitle1 = function (filename, hue, reservationId) {
!   return this.reserveBitmap("img/titles1/", filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveTitle2 = function (filename, hue, reservationId) {
!   return this.reserveBitmap("img/titles2/", filename, hue, true, reservationId);
! };
! 
! ImageManager.reserveBitmap = function (
!   folder,
!   filename,
!   hue,
!   smooth,
!   reservationId,
! ) {
    if (filename) {
!     var path = folder + encodeURIComponent(filename) + ".png";
!     var bitmap = this.reserveNormalBitmap(
!       path,
!       hue || 0,
!       reservationId || this._defaultReservationId,
!     );
      bitmap.smooth = smooth;
      return bitmap;
    } else {
***************
*** 988,1068 ****
      }
  };
  
! ImageManager.reserveNormalBitmap = function(path, hue, reservationId){
      var bitmap = this.loadNormalBitmap(path, hue);
!     this._imageCache.reserve(this._generateCacheKey(path, hue), bitmap, reservationId);
  
      return bitmap;
  };
  
! ImageManager.releaseReservation = function(reservationId){
      this._imageCache.releaseReservation(reservationId);
  };
  
! ImageManager.setDefaultReservationId = function(reservationId){
      this._defaultReservationId = reservationId;
  };
  
! 
! ImageManager.requestAnimation = function(filename, hue) {
!     return this.requestBitmap('img/animations/', filename, hue, true);
  };
  
! ImageManager.requestBattleback1 = function(filename, hue) {
!     return this.requestBitmap('img/battlebacks1/', filename, hue, true);
  };
  
! ImageManager.requestBattleback2 = function(filename, hue) {
!     return this.requestBitmap('img/battlebacks2/', filename, hue, true);
  };
  
! ImageManager.requestEnemy = function(filename, hue) {
!     return this.requestBitmap('img/enemies/', filename, hue, true);
  };
  
! ImageManager.requestCharacter = function(filename, hue) {
!     return this.requestBitmap('img/characters/', filename, hue, false);
  };
  
! ImageManager.requestFace = function(filename, hue) {
!     return this.requestBitmap('img/faces/', filename, hue, true);
  };
  
! ImageManager.requestParallax = function(filename, hue) {
!     return this.requestBitmap('img/parallaxes/', filename, hue, true);
  };
  
! ImageManager.requestPicture = function(filename, hue) {
!     return this.requestBitmap('img/pictures/', filename, hue, true);
  };
  
! ImageManager.requestSvActor = function(filename, hue) {
!     return this.requestBitmap('img/sv_actors/', filename, hue, false);
  };
  
! ImageManager.requestSvEnemy = function(filename, hue) {
!     return this.requestBitmap('img/sv_enemies/', filename, hue, true);
  };
  
! ImageManager.requestSystem = function(filename, hue) {
!     return this.requestBitmap('img/system/', filename, hue, false);
  };
  
! ImageManager.requestTileset = function(filename, hue) {
!     return this.requestBitmap('img/tilesets/', filename, hue, false);
  };
  
! ImageManager.requestTitle1 = function(filename, hue) {
!     return this.requestBitmap('img/titles1/', filename, hue, true);
  };
  
! ImageManager.requestTitle2 = function(filename, hue) {
!     return this.requestBitmap('img/titles2/', filename, hue, true);
  };
  
! ImageManager.requestBitmap = function(folder, filename, hue, smooth) {
      if (filename) {
!         var path = folder + encodeURIComponent(filename) + '.png';
          var bitmap = this.requestNormalBitmap(path, hue || 0);
          bitmap.smooth = smooth;
          return bitmap;
--- 993,1076 ----
    }
  };
  
! ImageManager.reserveNormalBitmap = function (path, hue, reservationId) {
    var bitmap = this.loadNormalBitmap(path, hue);
!   this._imageCache.reserve(
!     this._generateCacheKey(path, hue),
!     bitmap,
!     reservationId,
!   );
  
    return bitmap;
  };
  
! ImageManager.releaseReservation = function (reservationId) {
    this._imageCache.releaseReservation(reservationId);
  };
  
! ImageManager.setDefaultReservationId = function (reservationId) {
    this._defaultReservationId = reservationId;
  };
  
! ImageManager.requestAnimation = function (filename, hue) {
!   return this.requestBitmap("img/animations/", filename, hue, true);
  };
  
! ImageManager.requestBattleback1 = function (filename, hue) {
!   return this.requestBitmap("img/battlebacks1/", filename, hue, true);
  };
  
! ImageManager.requestBattleback2 = function (filename, hue) {
!   return this.requestBitmap("img/battlebacks2/", filename, hue, true);
  };
  
! ImageManager.requestEnemy = function (filename, hue) {
!   return this.requestBitmap("img/enemies/", filename, hue, true);
  };
  
! ImageManager.requestCharacter = function (filename, hue) {
!   return this.requestBitmap("img/characters/", filename, hue, false);
  };
  
! ImageManager.requestFace = function (filename, hue) {
!   return this.requestBitmap("img/faces/", filename, hue, true);
  };
  
! ImageManager.requestParallax = function (filename, hue) {
!   return this.requestBitmap("img/parallaxes/", filename, hue, true);
  };
  
! ImageManager.requestPicture = function (filename, hue) {
!   return this.requestBitmap("img/pictures/", filename, hue, true);
  };
  
! ImageManager.requestSvActor = function (filename, hue) {
!   return this.requestBitmap("img/sv_actors/", filename, hue, false);
  };
  
! ImageManager.requestSvEnemy = function (filename, hue) {
!   return this.requestBitmap("img/sv_enemies/", filename, hue, true);
  };
  
! ImageManager.requestSystem = function (filename, hue) {
!   return this.requestBitmap("img/system/", filename, hue, false);
  };
  
! ImageManager.requestTileset = function (filename, hue) {
!   return this.requestBitmap("img/tilesets/", filename, hue, false);
  };
  
! ImageManager.requestTitle1 = function (filename, hue) {
!   return this.requestBitmap("img/titles1/", filename, hue, true);
  };
  
! ImageManager.requestTitle2 = function (filename, hue) {
!   return this.requestBitmap("img/titles2/", filename, hue, true);
  };
  
! ImageManager.requestBitmap = function (folder, filename, hue, smooth) {
    if (filename) {
!     var path = folder + encodeURIComponent(filename) + ".png";
      var bitmap = this.requestNormalBitmap(path, hue || 0);
      bitmap.smooth = smooth;
      return bitmap;
***************
*** 1071,1098 ****
      }
  };
  
! ImageManager.requestNormalBitmap = function(path, hue){
      var key = this._generateCacheKey(path, hue);
      var bitmap = this._imageCache.get(key);
!     if(!bitmap){
          bitmap = Bitmap.request(path);
!         bitmap.addLoadListener(function(){
              bitmap.rotateHue(hue);
          });
          this._imageCache.add(key, bitmap);
          this._requestQueue.enqueue(key, bitmap);
!     }else{
          this._requestQueue.raisePriority(key);
      }
  
      return bitmap;
  };
  
! ImageManager.update = function(){
      this._requestQueue.update();
  };
  
! ImageManager.clearRequest = function(){
      this._requestQueue.clear();
  };
  
--- 1079,1106 ----
    }
  };
  
! ImageManager.requestNormalBitmap = function (path, hue) {
    var key = this._generateCacheKey(path, hue);
    var bitmap = this._imageCache.get(key);
!   if (!bitmap) {
      bitmap = Bitmap.request(path);
!     bitmap.addLoadListener(function () {
        bitmap.rotateHue(hue);
      });
      this._imageCache.add(key, bitmap);
      this._requestQueue.enqueue(key, bitmap);
!   } else {
      this._requestQueue.raisePriority(key);
    }
  
    return bitmap;
  };
  
! ImageManager.update = function () {
    this._requestQueue.update();
  };
  
! ImageManager.clearRequest = function () {
    this._requestQueue.clear();
  };
  
***************
*** 1102,1108 ****
  // The static class that handles BGM, BGS, ME and SE.
  
  function AudioManager() {
!     throw new Error('This is a static class');
  }
  
  AudioManager._masterVolume   = 1;   // (min: 0, max: 1)
--- 1110,1116 ----
  // The static class that handles BGM, BGS, ME and SE.
  
  function AudioManager() {
!   throw new Error("This is a static class");
  }
  
  AudioManager._masterVolume = 1; // (min: 0, max: 1)
***************
*** 1118,1192 ****
  AudioManager._seBuffers      = [];
  AudioManager._staticBuffers  = [];
  AudioManager._replayFadeTime = 0.5;
! AudioManager._path           = 'audio/';
  AudioManager._blobUrl        = null;
  
! Object.defineProperty(AudioManager, 'masterVolume', {
!     get: function() {
          return this._masterVolume;
      },
!     set: function(value) {
          this._masterVolume = value;
          WebAudio.setMasterVolume(this._masterVolume);
          Graphics.setVideoVolume(this._masterVolume);
      },
!     configurable: true
  });
  
! Object.defineProperty(AudioManager, 'bgmVolume', {
!     get: function() {
          return this._bgmVolume;
      },
!     set: function(value) {
          this._bgmVolume = value;
          this.updateBgmParameters(this._currentBgm);
      },
!     configurable: true
  });
  
! Object.defineProperty(AudioManager, 'bgsVolume', {
!     get: function() {
          return this._bgsVolume;
      },
!     set: function(value) {
          this._bgsVolume = value;
          this.updateBgsParameters(this._currentBgs);
      },
!     configurable: true
  });
  
! Object.defineProperty(AudioManager, 'meVolume', {
!     get: function() {
          return this._meVolume;
      },
!     set: function(value) {
          this._meVolume = value;
          this.updateMeParameters(this._currentMe);
      },
!     configurable: true
  });
  
! Object.defineProperty(AudioManager, 'seVolume', {
!     get: function() {
          return this._seVolume;
      },
!     set: function(value) {
          this._seVolume = value;
      },
!     configurable: true
  });
  
! AudioManager.playBgm = function(bgm, pos) {
      if (this.isCurrentBgm(bgm)) {
          this.updateBgmParameters(bgm);
      } else {
          this.stopBgm();
          if (bgm.name) { 
!             if(Decrypter.hasEncryptedAudio && this.shouldUseHtml5Audio()){
                  this.playEncryptedBgm(bgm, pos);
!             }
!             else {
!                 this._bgmBuffer = this.createBuffer('bgm', bgm.name);
                  this.updateBgmParameters(bgm);
                  if (!this._meBuffer) {
                      this._bgmBuffer.play(true, pos || 0);
--- 1126,1199 ----
  AudioManager._seBuffers = [];
  AudioManager._staticBuffers = [];
  AudioManager._replayFadeTime = 0.5;
! AudioManager._path = "audio/";
  AudioManager._blobUrl = null;
  
! Object.defineProperty(AudioManager, "masterVolume", {
!   get: function () {
      return this._masterVolume;
    },
!   set: function (value) {
      this._masterVolume = value;
      WebAudio.setMasterVolume(this._masterVolume);
      Graphics.setVideoVolume(this._masterVolume);
    },
!   configurable: true,
  });
  
! Object.defineProperty(AudioManager, "bgmVolume", {
!   get: function () {
      return this._bgmVolume;
    },
!   set: function (value) {
      this._bgmVolume = value;
      this.updateBgmParameters(this._currentBgm);
    },
!   configurable: true,
  });
  
! Object.defineProperty(AudioManager, "bgsVolume", {
!   get: function () {
      return this._bgsVolume;
    },
!   set: function (value) {
      this._bgsVolume = value;
      this.updateBgsParameters(this._currentBgs);
    },
!   configurable: true,
  });
  
! Object.defineProperty(AudioManager, "meVolume", {
!   get: function () {
      return this._meVolume;
    },
!   set: function (value) {
      this._meVolume = value;
      this.updateMeParameters(this._currentMe);
    },
!   configurable: true,
  });
  
! Object.defineProperty(AudioManager, "seVolume", {
!   get: function () {
      return this._seVolume;
    },
!   set: function (value) {
      this._seVolume = value;
    },
!   configurable: true,
  });
  
! AudioManager.playBgm = function (bgm, pos) {
    if (this.isCurrentBgm(bgm)) {
      this.updateBgmParameters(bgm);
    } else {
      this.stopBgm();
      if (bgm.name) {
!       if (Decrypter.hasEncryptedAudio && this.shouldUseHtml5Audio()) {
          this.playEncryptedBgm(bgm, pos);
!       } else {
!         this._bgmBuffer = this.createBuffer("bgm", bgm.name);
          this.updateBgmParameters(bgm);
          if (!this._meBuffer) {
            this._bgmBuffer.play(true, pos || 0);
***************
*** 1197,1212 ****
      this.updateCurrentBgm(bgm, pos);
  };
  
! AudioManager.playEncryptedBgm = function(bgm, pos) {
      var ext = this.audioFileExt();
!     var url = this._path + 'bgm/' + encodeURIComponent(bgm.name) + ext;
      url = Decrypter.extToEncryptExt(url);
      Decrypter.decryptHTML5Audio(url, bgm, pos);
  };
  
! AudioManager.createDecryptBuffer = function(url, bgm, pos){
      this._blobUrl = url;
!     this._bgmBuffer = this.createBuffer('bgm', bgm.name);
      this.updateBgmParameters(bgm);
      if (!this._meBuffer) {
          this._bgmBuffer.play(true, pos || 0);
--- 1204,1219 ----
    this.updateCurrentBgm(bgm, pos);
  };
  
! AudioManager.playEncryptedBgm = function (bgm, pos) {
    var ext = this.audioFileExt();
!   var url = this._path + "bgm/" + encodeURIComponent(bgm.name) + ext;
    url = Decrypter.extToEncryptExt(url);
    Decrypter.decryptHTML5Audio(url, bgm, pos);
  };
  
! AudioManager.createDecryptBuffer = function (url, bgm, pos) {
    this._blobUrl = url;
!   this._bgmBuffer = this.createBuffer("bgm", bgm.name);
    this.updateBgmParameters(bgm);
    if (!this._meBuffer) {
      this._bgmBuffer.play(true, pos || 0);
***************
*** 1214,1220 ****
      this.updateCurrentBgm(bgm, pos);
  };
  
! AudioManager.replayBgm = function(bgm) {
      if (this.isCurrentBgm(bgm)) {
          this.updateBgmParameters(bgm);
      } else {
--- 1221,1227 ----
    this.updateCurrentBgm(bgm, pos);
  };
  
! AudioManager.replayBgm = function (bgm) {
    if (this.isCurrentBgm(bgm)) {
      this.updateBgmParameters(bgm);
    } else {
***************
*** 1225,1250 ****
      }
  };
  
! AudioManager.isCurrentBgm = function(bgm) {
!     return (this._currentBgm && this._bgmBuffer &&
!             this._currentBgm.name === bgm.name);
  };
  
! AudioManager.updateBgmParameters = function(bgm) {
      this.updateBufferParameters(this._bgmBuffer, this._bgmVolume, bgm);
  };
  
! AudioManager.updateCurrentBgm = function(bgm, pos) {
      this._currentBgm = {
          name: bgm.name,
          volume: bgm.volume,
          pitch: bgm.pitch,
          pan: bgm.pan,
!         pos: pos
      };
  };
  
! AudioManager.stopBgm = function() {
      if (this._bgmBuffer) {
          this._bgmBuffer.stop();
          this._bgmBuffer = null;
--- 1232,1258 ----
    }
  };
  
! AudioManager.isCurrentBgm = function (bgm) {
!   return (
!     this._currentBgm && this._bgmBuffer && this._currentBgm.name === bgm.name
!   );
  };
  
! AudioManager.updateBgmParameters = function (bgm) {
    this.updateBufferParameters(this._bgmBuffer, this._bgmVolume, bgm);
  };
  
! AudioManager.updateCurrentBgm = function (bgm, pos) {
    this._currentBgm = {
      name: bgm.name,
      volume: bgm.volume,
      pitch: bgm.pitch,
      pan: bgm.pan,
!     pos: pos,
    };
  };
  
! AudioManager.stopBgm = function () {
    if (this._bgmBuffer) {
      this._bgmBuffer.stop();
      this._bgmBuffer = null;
***************
*** 1252,1277 ****
      }
  };
  
! AudioManager.fadeOutBgm = function(duration) {
      if (this._bgmBuffer && this._currentBgm) {
          this._bgmBuffer.fadeOut(duration);
          this._currentBgm = null;
      }
  };
  
! AudioManager.fadeInBgm = function(duration) {
      if (this._bgmBuffer && this._currentBgm) {
          this._bgmBuffer.fadeIn(duration);
      }
  };
  
! AudioManager.playBgs = function(bgs, pos) {
      if (this.isCurrentBgs(bgs)) {
          this.updateBgsParameters(bgs);
      } else {
          this.stopBgs();
          if (bgs.name) {
!             this._bgsBuffer = this.createBuffer('bgs', bgs.name);
              this.updateBgsParameters(bgs);
              this._bgsBuffer.play(true, pos || 0);
          }
--- 1260,1285 ----
    }
  };
  
! AudioManager.fadeOutBgm = function (duration) {
    if (this._bgmBuffer && this._currentBgm) {
      this._bgmBuffer.fadeOut(duration);
      this._currentBgm = null;
    }
  };
  
! AudioManager.fadeInBgm = function (duration) {
    if (this._bgmBuffer && this._currentBgm) {
      this._bgmBuffer.fadeIn(duration);
    }
  };
  
! AudioManager.playBgs = function (bgs, pos) {
    if (this.isCurrentBgs(bgs)) {
      this.updateBgsParameters(bgs);
    } else {
      this.stopBgs();
      if (bgs.name) {
!       this._bgsBuffer = this.createBuffer("bgs", bgs.name);
        this.updateBgsParameters(bgs);
        this._bgsBuffer.play(true, pos || 0);
      }
***************
*** 1279,1285 ****
      this.updateCurrentBgs(bgs, pos);
  };
  
! AudioManager.replayBgs = function(bgs) {
      if (this.isCurrentBgs(bgs)) {
          this.updateBgsParameters(bgs);
      } else {
--- 1287,1293 ----
    this.updateCurrentBgs(bgs, pos);
  };
  
! AudioManager.replayBgs = function (bgs) {
    if (this.isCurrentBgs(bgs)) {
      this.updateBgsParameters(bgs);
    } else {
***************
*** 1290,1315 ****
      }
  };
  
! AudioManager.isCurrentBgs = function(bgs) {
!     return (this._currentBgs && this._bgsBuffer &&
!             this._currentBgs.name === bgs.name);
  };
  
! AudioManager.updateBgsParameters = function(bgs) {
      this.updateBufferParameters(this._bgsBuffer, this._bgsVolume, bgs);
  };
  
! AudioManager.updateCurrentBgs = function(bgs, pos) {
      this._currentBgs = {
          name: bgs.name,
          volume: bgs.volume,
          pitch: bgs.pitch,
          pan: bgs.pan,
!         pos: pos
      };
  };
  
! AudioManager.stopBgs = function() {
      if (this._bgsBuffer) {
          this._bgsBuffer.stop();
          this._bgsBuffer = null;
--- 1298,1324 ----
    }
  };
  
! AudioManager.isCurrentBgs = function (bgs) {
!   return (
!     this._currentBgs && this._bgsBuffer && this._currentBgs.name === bgs.name
!   );
  };
  
! AudioManager.updateBgsParameters = function (bgs) {
    this.updateBufferParameters(this._bgsBuffer, this._bgsVolume, bgs);
  };
  
! AudioManager.updateCurrentBgs = function (bgs, pos) {
    this._currentBgs = {
      name: bgs.name,
      volume: bgs.volume,
      pitch: bgs.pitch,
      pan: bgs.pan,
!     pos: pos,
    };
  };
  
! AudioManager.stopBgs = function () {
    if (this._bgsBuffer) {
      this._bgsBuffer.stop();
      this._bgsBuffer = null;
***************
*** 1317,1360 ****
      }
  };
  
! AudioManager.fadeOutBgs = function(duration) {
      if (this._bgsBuffer && this._currentBgs) {
          this._bgsBuffer.fadeOut(duration);
          this._currentBgs = null;
      }
  };
  
! AudioManager.fadeInBgs = function(duration) {
      if (this._bgsBuffer && this._currentBgs) {
          this._bgsBuffer.fadeIn(duration);
      }
  };
  
! AudioManager.playMe = function(me) {
      this.stopMe();
      if (me.name) {
          if (this._bgmBuffer && this._currentBgm) {
              this._currentBgm.pos = this._bgmBuffer.seek();
              this._bgmBuffer.stop();
          }
!         this._meBuffer = this.createBuffer('me', me.name);
          this.updateMeParameters(me);
          this._meBuffer.play(false);
          this._meBuffer.addStopListener(this.stopMe.bind(this));
      }
  };
  
! AudioManager.updateMeParameters = function(me) {
      this.updateBufferParameters(this._meBuffer, this._meVolume, me);
  };
  
! AudioManager.fadeOutMe = function(duration) {
      if (this._meBuffer) {
          this._meBuffer.fadeOut(duration);
      }
  };
  
! AudioManager.stopMe = function() {
      if (this._meBuffer) {
          this._meBuffer.stop();
          this._meBuffer = null;
--- 1326,1369 ----
    }
  };
  
! AudioManager.fadeOutBgs = function (duration) {
    if (this._bgsBuffer && this._currentBgs) {
      this._bgsBuffer.fadeOut(duration);
      this._currentBgs = null;
    }
  };
  
! AudioManager.fadeInBgs = function (duration) {
    if (this._bgsBuffer && this._currentBgs) {
      this._bgsBuffer.fadeIn(duration);
    }
  };
  
! AudioManager.playMe = function (me) {
    this.stopMe();
    if (me.name) {
      if (this._bgmBuffer && this._currentBgm) {
        this._currentBgm.pos = this._bgmBuffer.seek();
        this._bgmBuffer.stop();
      }
!     this._meBuffer = this.createBuffer("me", me.name);
      this.updateMeParameters(me);
      this._meBuffer.play(false);
      this._meBuffer.addStopListener(this.stopMe.bind(this));
    }
  };
  
! AudioManager.updateMeParameters = function (me) {
    this.updateBufferParameters(this._meBuffer, this._meVolume, me);
  };
  
! AudioManager.fadeOutMe = function (duration) {
    if (this._meBuffer) {
      this._meBuffer.fadeOut(duration);
    }
  };
  
! AudioManager.stopMe = function () {
    if (this._meBuffer) {
      this._meBuffer.stop();
      this._meBuffer = null;
***************
*** 1365,1394 ****
      }
  };
  
! AudioManager.playSe = function(se) {
      if (se.name) {
!         this._seBuffers = this._seBuffers.filter(function(audio) {
              return audio.isPlaying();
          });
!         var buffer = this.createBuffer('se', se.name);
          this.updateSeParameters(buffer, se);
          buffer.play(false);
          this._seBuffers.push(buffer);
      }
  };
  
! AudioManager.updateSeParameters = function(buffer, se) {
      this.updateBufferParameters(buffer, this._seVolume, se);
  };
  
! AudioManager.stopSe = function() {
!     this._seBuffers.forEach(function(buffer) {
          buffer.stop();
      });
      this._seBuffers = [];
  };
  
! AudioManager.playStaticSe = function(se) {
      if (se.name) {
          this.loadStaticSe(se);
          for (var i = 0; i < this._staticBuffers.length; i++) {
--- 1374,1403 ----
    }
  };
  
! AudioManager.playSe = function (se) {
    if (se.name) {
!     this._seBuffers = this._seBuffers.filter(function (audio) {
        return audio.isPlaying();
      });
!     var buffer = this.createBuffer("se", se.name);
      this.updateSeParameters(buffer, se);
      buffer.play(false);
      this._seBuffers.push(buffer);
    }
  };
  
! AudioManager.updateSeParameters = function (buffer, se) {
    this.updateBufferParameters(buffer, this._seVolume, se);
  };
  
! AudioManager.stopSe = function () {
!   this._seBuffers.forEach(function (buffer) {
      buffer.stop();
    });
    this._seBuffers = [];
  };
  
! AudioManager.playStaticSe = function (se) {
    if (se.name) {
      this.loadStaticSe(se);
      for (var i = 0; i < this._staticBuffers.length; i++) {
***************
*** 1403,1411 ****
      }
  };
  
! AudioManager.loadStaticSe = function(se) {
      if (se.name && !this.isStaticSe(se)) {
!         var buffer = this.createBuffer('se', se.name);
          buffer._reservedSeName = se.name;
          this._staticBuffers.push(buffer);
          if (this.shouldUseHtml5Audio()) {
--- 1412,1420 ----
    }
  };
  
! AudioManager.loadStaticSe = function (se) {
    if (se.name && !this.isStaticSe(se)) {
!     var buffer = this.createBuffer("se", se.name);
      buffer._reservedSeName = se.name;
      this._staticBuffers.push(buffer);
      if (this.shouldUseHtml5Audio()) {
***************
*** 1414,1420 ****
      }
  };
  
! AudioManager.isStaticSe = function(se) {
      for (var i = 0; i < this._staticBuffers.length; i++) {
          var buffer = this._staticBuffers[i];
          if (buffer._reservedSeName === se.name) {
--- 1423,1429 ----
    }
  };
  
! AudioManager.isStaticSe = function (se) {
    for (var i = 0; i < this._staticBuffers.length; i++) {
      var buffer = this._staticBuffers[i];
      if (buffer._reservedSeName === se.name) {
***************
*** 1424,1437 ****
      return false;
  };
  
! AudioManager.stopAll = function() {
      this.stopMe();
      this.stopBgm();
      this.stopBgs();
      this.stopSe();
  };
  
! AudioManager.saveBgm = function() {
      if (this._currentBgm) {
          var bgm = this._currentBgm;
          return {
--- 1433,1446 ----
    return false;
  };
  
! AudioManager.stopAll = function () {
    this.stopMe();
    this.stopBgm();
    this.stopBgs();
    this.stopSe();
  };
  
! AudioManager.saveBgm = function () {
    if (this._currentBgm) {
      var bgm = this._currentBgm;
      return {
***************
*** 1439,1452 ****
              volume: bgm.volume,
              pitch: bgm.pitch,
              pan: bgm.pan,
!             pos: this._bgmBuffer ? this._bgmBuffer.seek() : 0
          };
      } else {
          return this.makeEmptyAudioObject();
      }
  };
  
! AudioManager.saveBgs = function() {
      if (this._currentBgs) {
          var bgs = this._currentBgs;
          return {
--- 1448,1461 ----
        volume: bgm.volume,
        pitch: bgm.pitch,
        pan: bgm.pan,
!       pos: this._bgmBuffer ? this._bgmBuffer.seek() : 0,
      };
    } else {
      return this.makeEmptyAudioObject();
    }
  };
  
! AudioManager.saveBgs = function () {
    if (this._currentBgs) {
      var bgs = this._currentBgs;
      return {
***************
*** 1454,1475 ****
              volume: bgs.volume,
              pitch: bgs.pitch,
              pan: bgs.pan,
!             pos: this._bgsBuffer ? this._bgsBuffer.seek() : 0
          };
      } else {
          return this.makeEmptyAudioObject();
      }
  };
  
! AudioManager.makeEmptyAudioObject = function() {
!     return { name: '', volume: 0, pitch: 0 };
  };
  
! AudioManager.createBuffer = function(folder, name) {
      var ext = this.audioFileExt();
!     var url = this._path + folder + '/' + encodeURIComponent(name) + ext;
!     if (this.shouldUseHtml5Audio() && folder === 'bgm') {
!         if(this._blobUrl) Html5Audio.setup(this._blobUrl);
          else Html5Audio.setup(url);
          return Html5Audio;
      } else {
--- 1463,1484 ----
        volume: bgs.volume,
        pitch: bgs.pitch,
        pan: bgs.pan,
!       pos: this._bgsBuffer ? this._bgsBuffer.seek() : 0,
      };
    } else {
      return this.makeEmptyAudioObject();
    }
  };
  
! AudioManager.makeEmptyAudioObject = function () {
!   return { name: "", volume: 0, pitch: 0 };
  };
  
! AudioManager.createBuffer = function (folder, name) {
    var ext = this.audioFileExt();
!   var url = this._path + folder + "/" + encodeURIComponent(name) + ext;
!   if (this.shouldUseHtml5Audio() && folder === "bgm") {
!     if (this._blobUrl) Html5Audio.setup(this._blobUrl);
      else Html5Audio.setup(url);
      return Html5Audio;
    } else {
***************
*** 1477,1519 ****
      }
  };
  
! AudioManager.updateBufferParameters = function(buffer, configVolume, audio) {
      if (buffer && audio) {
!         buffer.volume = configVolume * (audio.volume || 0) / 10000;
          buffer.pitch = (audio.pitch || 0) / 100;
          buffer.pan = (audio.pan || 0) / 100;
      }
  };
  
! AudioManager.audioFileExt = function() {
      if (WebAudio.canPlayOgg() && !Utils.isMobileDevice()) {
!         return '.ogg';
      } else {
!         return '.m4a';
      }
  };
  
! AudioManager.shouldUseHtml5Audio = function() {
      // The only case where we wanted html5audio was android/ no encrypt
      // Atsuma-ru asked to force webaudio there too, so just return false for ALL    // return Utils.isAndroidChrome() && !Decrypter.hasEncryptedAudio;
   return false;
  };
  
! AudioManager.checkErrors = function() {
      this.checkWebAudioError(this._bgmBuffer);
      this.checkWebAudioError(this._bgsBuffer);
      this.checkWebAudioError(this._meBuffer);
!     this._seBuffers.forEach(function(buffer) {
          this.checkWebAudioError(buffer);
!     }.bind(this));
!     this._staticBuffers.forEach(function(buffer) {
          this.checkWebAudioError(buffer);
!     }.bind(this));
  };
  
! AudioManager.checkWebAudioError = function(webAudio) {
      if (webAudio && webAudio.isError()) {
!         throw new Error('Failed to load: ' + webAudio.url);
      }
  };
  
--- 1486,1532 ----
    }
  };
  
! AudioManager.updateBufferParameters = function (buffer, configVolume, audio) {
    if (buffer && audio) {
!     buffer.volume = (configVolume * (audio.volume || 0)) / 10000;
      buffer.pitch = (audio.pitch || 0) / 100;
      buffer.pan = (audio.pan || 0) / 100;
    }
  };
  
! AudioManager.audioFileExt = function () {
    if (WebAudio.canPlayOgg() && !Utils.isMobileDevice()) {
!     return ".ogg";
    } else {
!     return ".m4a";
    }
  };
  
! AudioManager.shouldUseHtml5Audio = function () {
    // The only case where we wanted html5audio was android/ no encrypt
    // Atsuma-ru asked to force webaudio there too, so just return false for ALL    // return Utils.isAndroidChrome() && !Decrypter.hasEncryptedAudio;
    return false;
  };
  
! AudioManager.checkErrors = function () {
    this.checkWebAudioError(this._bgmBuffer);
    this.checkWebAudioError(this._bgsBuffer);
    this.checkWebAudioError(this._meBuffer);
!   this._seBuffers.forEach(
!     function (buffer) {
        this.checkWebAudioError(buffer);
!     }.bind(this),
!   );
!   this._staticBuffers.forEach(
!     function (buffer) {
        this.checkWebAudioError(buffer);
!     }.bind(this),
!   );
  };
  
! AudioManager.checkWebAudioError = function (webAudio) {
    if (webAudio && webAudio.isError()) {
!     throw new Error("Failed to load: " + webAudio.url);
    }
  };
  
***************
*** 1523,1643 ****
  // The static class that plays sound effects defined in the database.
  
  function SoundManager() {
!     throw new Error('This is a static class');
  }
  
! SoundManager.preloadImportantSounds = function() {
      this.loadSystemSound(0);
      this.loadSystemSound(1);
      this.loadSystemSound(2);
      this.loadSystemSound(3);
  };
  
! SoundManager.loadSystemSound = function(n) {
      if ($dataSystem) {
          AudioManager.loadStaticSe($dataSystem.sounds[n]);
      }
  };
  
! SoundManager.playSystemSound = function(n) {
      if ($dataSystem) {
          AudioManager.playStaticSe($dataSystem.sounds[n]);
      }
  };
  
! SoundManager.playCursor = function() {
      this.playSystemSound(0);
  };
  
! SoundManager.playOk = function() {
      this.playSystemSound(1);
  };
  
! SoundManager.playCancel = function() {
      this.playSystemSound(2);
  };
  
! SoundManager.playBuzzer = function() {
      this.playSystemSound(3);
  };
  
! SoundManager.playEquip = function() {
      this.playSystemSound(4);
  };
  
! SoundManager.playSave = function() {
      this.playSystemSound(5);
  };
  
! SoundManager.playLoad = function() {
      this.playSystemSound(6);
  };
  
! SoundManager.playBattleStart = function() {
      this.playSystemSound(7);
  };
  
! SoundManager.playEscape = function() {
      this.playSystemSound(8);
  };
  
! SoundManager.playEnemyAttack = function() {
      this.playSystemSound(9);
  };
  
! SoundManager.playEnemyDamage = function() {
      this.playSystemSound(10);
  };
  
! SoundManager.playEnemyCollapse = function() {
      this.playSystemSound(11);
  };
  
! SoundManager.playBossCollapse1 = function() {
      this.playSystemSound(12);
  };
  
! SoundManager.playBossCollapse2 = function() {
      this.playSystemSound(13);
  };
  
! SoundManager.playActorDamage = function() {
      this.playSystemSound(14);
  };
  
! SoundManager.playActorCollapse = function() {
      this.playSystemSound(15);
  };
  
! SoundManager.playRecovery = function() {
      this.playSystemSound(16);
  };
  
! SoundManager.playMiss = function() {
      this.playSystemSound(17);
  };
  
! SoundManager.playEvasion = function() {
      this.playSystemSound(18);
  };
  
! SoundManager.playMagicEvasion = function() {
      this.playSystemSound(19);
  };
  
! SoundManager.playReflection = function() {
      this.playSystemSound(20);
  };
  
! SoundManager.playShop = function() {
      this.playSystemSound(21);
  };
  
! SoundManager.playUseItem = function() {
      this.playSystemSound(22);
  };
  
! SoundManager.playUseSkill = function() {
      this.playSystemSound(23);
  };
  
--- 1536,1656 ----
  // The static class that plays sound effects defined in the database.
  
  function SoundManager() {
!   throw new Error("This is a static class");
  }
  
! SoundManager.preloadImportantSounds = function () {
    this.loadSystemSound(0);
    this.loadSystemSound(1);
    this.loadSystemSound(2);
    this.loadSystemSound(3);
  };
  
! SoundManager.loadSystemSound = function (n) {
    if ($dataSystem) {
      AudioManager.loadStaticSe($dataSystem.sounds[n]);
    }
  };
  
! SoundManager.playSystemSound = function (n) {
    if ($dataSystem) {
      AudioManager.playStaticSe($dataSystem.sounds[n]);
    }
  };
  
! SoundManager.playCursor = function () {
    this.playSystemSound(0);
  };
  
! SoundManager.playOk = function () {
    this.playSystemSound(1);
  };
  
! SoundManager.playCancel = function () {
    this.playSystemSound(2);
  };
  
! SoundManager.playBuzzer = function () {
    this.playSystemSound(3);
  };
  
! SoundManager.playEquip = function () {
    this.playSystemSound(4);
  };
  
! SoundManager.playSave = function () {
    this.playSystemSound(5);
  };
  
! SoundManager.playLoad = function () {
    this.playSystemSound(6);
  };
  
! SoundManager.playBattleStart = function () {
    this.playSystemSound(7);
  };
  
! SoundManager.playEscape = function () {
    this.playSystemSound(8);
  };
  
! SoundManager.playEnemyAttack = function () {
    this.playSystemSound(9);
  };
  
! SoundManager.playEnemyDamage = function () {
    this.playSystemSound(10);
  };
  
! SoundManager.playEnemyCollapse = function () {
    this.playSystemSound(11);
  };
  
! SoundManager.playBossCollapse1 = function () {
    this.playSystemSound(12);
  };
  
! SoundManager.playBossCollapse2 = function () {
    this.playSystemSound(13);
  };
  
! SoundManager.playActorDamage = function () {
    this.playSystemSound(14);
  };
  
! SoundManager.playActorCollapse = function () {
    this.playSystemSound(15);
  };
  
! SoundManager.playRecovery = function () {
    this.playSystemSound(16);
  };
  
! SoundManager.playMiss = function () {
    this.playSystemSound(17);
  };
  
! SoundManager.playEvasion = function () {
    this.playSystemSound(18);
  };
  
! SoundManager.playMagicEvasion = function () {
    this.playSystemSound(19);
  };
  
! SoundManager.playReflection = function () {
    this.playSystemSound(20);
  };
  
! SoundManager.playShop = function () {
    this.playSystemSound(21);
  };
  
! SoundManager.playUseItem = function () {
    this.playSystemSound(22);
  };
  
! SoundManager.playUseSkill = function () {
    this.playSystemSound(23);
  };
  
***************
*** 1647,1771 ****
  // The static class that handles terms and messages.
  
  function TextManager() {
!     throw new Error('This is a static class');
  }
  
! TextManager.basic = function(basicId) {
!     return $dataSystem.terms.basic[basicId] || '';
  };
  
! TextManager.param = function(paramId) {
!     return $dataSystem.terms.params[paramId] || '';
  };
  
! TextManager.command = function(commandId) {
!     return $dataSystem.terms.commands[commandId] || '';
  };
  
! TextManager.message = function(messageId) {
!     return $dataSystem.terms.messages[messageId] || '';
  };
  
! TextManager.getter = function(method, param) {
      return {
!         get: function() {
              return this[method](param);
          },
!         configurable: true
      };
  };
  
! Object.defineProperty(TextManager, 'currencyUnit', {
!     get: function() { return $dataSystem.currencyUnit; },
!     configurable: true
  });
  
  Object.defineProperties(TextManager, {
!     level           : TextManager.getter('basic', 0),
!     levelA          : TextManager.getter('basic', 1),
!     hp              : TextManager.getter('basic', 2),
!     hpA             : TextManager.getter('basic', 3),
!     mp              : TextManager.getter('basic', 4),
!     mpA             : TextManager.getter('basic', 5),
!     tp              : TextManager.getter('basic', 6),
!     tpA             : TextManager.getter('basic', 7),
!     exp             : TextManager.getter('basic', 8),
!     expA            : TextManager.getter('basic', 9),
!     fight           : TextManager.getter('command', 0),
!     escape          : TextManager.getter('command', 1),
!     attack          : TextManager.getter('command', 2),
!     guard           : TextManager.getter('command', 3),
!     item            : TextManager.getter('command', 4),
!     skill           : TextManager.getter('command', 5),
!     equip           : TextManager.getter('command', 6),
!     status          : TextManager.getter('command', 7),
!     formation       : TextManager.getter('command', 8),
!     save            : TextManager.getter('command', 9),
!     gameEnd         : TextManager.getter('command', 10),
!     options         : TextManager.getter('command', 11),
!     weapon          : TextManager.getter('command', 12),
!     armor           : TextManager.getter('command', 13),
!     keyItem         : TextManager.getter('command', 14),
!     equip2          : TextManager.getter('command', 15),
!     optimize        : TextManager.getter('command', 16),
!     clear           : TextManager.getter('command', 17),
!     newGame         : TextManager.getter('command', 18),
!     continue_       : TextManager.getter('command', 19),
!     toTitle         : TextManager.getter('command', 21),
!     cancel          : TextManager.getter('command', 22),
!     buy             : TextManager.getter('command', 24),
!     sell            : TextManager.getter('command', 25),
!     alwaysDash      : TextManager.getter('message', 'alwaysDash'),
!     commandRemember : TextManager.getter('message', 'commandRemember'),
!     bgmVolume       : TextManager.getter('message', 'bgmVolume'),
!     bgsVolume       : TextManager.getter('message', 'bgsVolume'),
!     meVolume        : TextManager.getter('message', 'meVolume'),
!     seVolume        : TextManager.getter('message', 'seVolume'),
!     possession      : TextManager.getter('message', 'possession'),
!     expTotal        : TextManager.getter('message', 'expTotal'),
!     expNext         : TextManager.getter('message', 'expNext'),
!     saveMessage     : TextManager.getter('message', 'saveMessage'),
!     loadMessage     : TextManager.getter('message', 'loadMessage'),
!     file            : TextManager.getter('message', 'file'),
!     partyName       : TextManager.getter('message', 'partyName'),
!     emerge          : TextManager.getter('message', 'emerge'),
!     preemptive      : TextManager.getter('message', 'preemptive'),
!     surprise        : TextManager.getter('message', 'surprise'),
!     escapeStart     : TextManager.getter('message', 'escapeStart'),
!     escapeFailure   : TextManager.getter('message', 'escapeFailure'),
!     victory         : TextManager.getter('message', 'victory'),
!     defeat          : TextManager.getter('message', 'defeat'),
!     obtainExp       : TextManager.getter('message', 'obtainExp'),
!     obtainGold      : TextManager.getter('message', 'obtainGold'),
!     obtainItem      : TextManager.getter('message', 'obtainItem'),
!     levelUp         : TextManager.getter('message', 'levelUp'),
!     obtainSkill     : TextManager.getter('message', 'obtainSkill'),
!     useItem         : TextManager.getter('message', 'useItem'),
!     criticalToEnemy : TextManager.getter('message', 'criticalToEnemy'),
!     criticalToActor : TextManager.getter('message', 'criticalToActor'),
!     actorDamage     : TextManager.getter('message', 'actorDamage'),
!     actorRecovery   : TextManager.getter('message', 'actorRecovery'),
!     actorGain       : TextManager.getter('message', 'actorGain'),
!     actorLoss       : TextManager.getter('message', 'actorLoss'),
!     actorDrain      : TextManager.getter('message', 'actorDrain'),
!     actorNoDamage   : TextManager.getter('message', 'actorNoDamage'),
!     actorNoHit      : TextManager.getter('message', 'actorNoHit'),
!     enemyDamage     : TextManager.getter('message', 'enemyDamage'),
!     enemyRecovery   : TextManager.getter('message', 'enemyRecovery'),
!     enemyGain       : TextManager.getter('message', 'enemyGain'),
!     enemyLoss       : TextManager.getter('message', 'enemyLoss'),
!     enemyDrain      : TextManager.getter('message', 'enemyDrain'),
!     enemyNoDamage   : TextManager.getter('message', 'enemyNoDamage'),
!     enemyNoHit      : TextManager.getter('message', 'enemyNoHit'),
!     evasion         : TextManager.getter('message', 'evasion'),
!     magicEvasion    : TextManager.getter('message', 'magicEvasion'),
!     magicReflection : TextManager.getter('message', 'magicReflection'),
!     counterAttack   : TextManager.getter('message', 'counterAttack'),
!     substitute      : TextManager.getter('message', 'substitute'),
!     buffAdd         : TextManager.getter('message', 'buffAdd'),
!     debuffAdd       : TextManager.getter('message', 'debuffAdd'),
!     buffRemove      : TextManager.getter('message', 'buffRemove'),
!     actionFailure   : TextManager.getter('message', 'actionFailure'),
  });
  
  //-----------------------------------------------------------------------------
--- 1660,1786 ----
  // The static class that handles terms and messages.
  
  function TextManager() {
!   throw new Error("This is a static class");
  }
  
! TextManager.basic = function (basicId) {
!   return $dataSystem.terms.basic[basicId] || "";
  };
  
! TextManager.param = function (paramId) {
!   return $dataSystem.terms.params[paramId] || "";
  };
  
! TextManager.command = function (commandId) {
!   return $dataSystem.terms.commands[commandId] || "";
  };
  
! TextManager.message = function (messageId) {
!   return $dataSystem.terms.messages[messageId] || "";
  };
  
! TextManager.getter = function (method, param) {
    return {
!     get: function () {
        return this[method](param);
      },
!     configurable: true,
    };
  };
  
! Object.defineProperty(TextManager, "currencyUnit", {
!   get: function () {
!     return $dataSystem.currencyUnit;
!   },
!   configurable: true,
  });
  
  Object.defineProperties(TextManager, {
!   level: TextManager.getter("basic", 0),
!   levelA: TextManager.getter("basic", 1),
!   hp: TextManager.getter("basic", 2),
!   hpA: TextManager.getter("basic", 3),
!   mp: TextManager.getter("basic", 4),
!   mpA: TextManager.getter("basic", 5),
!   tp: TextManager.getter("basic", 6),
!   tpA: TextManager.getter("basic", 7),
!   exp: TextManager.getter("basic", 8),
!   expA: TextManager.getter("basic", 9),
!   fight: TextManager.getter("command", 0),
!   escape: TextManager.getter("command", 1),
!   attack: TextManager.getter("command", 2),
!   guard: TextManager.getter("command", 3),
!   item: TextManager.getter("command", 4),
!   skill: TextManager.getter("command", 5),
!   equip: TextManager.getter("command", 6),
!   status: TextManager.getter("command", 7),
!   formation: TextManager.getter("command", 8),
!   save: TextManager.getter("command", 9),
!   gameEnd: TextManager.getter("command", 10),
!   options: TextManager.getter("command", 11),
!   weapon: TextManager.getter("command", 12),
!   armor: TextManager.getter("command", 13),
!   keyItem: TextManager.getter("command", 14),
!   equip2: TextManager.getter("command", 15),
!   optimize: TextManager.getter("command", 16),
!   clear: TextManager.getter("command", 17),
!   newGame: TextManager.getter("command", 18),
!   continue_: TextManager.getter("command", 19),
!   toTitle: TextManager.getter("command", 21),
!   cancel: TextManager.getter("command", 22),
!   buy: TextManager.getter("command", 24),
!   sell: TextManager.getter("command", 25),
!   alwaysDash: TextManager.getter("message", "alwaysDash"),
!   commandRemember: TextManager.getter("message", "commandRemember"),
!   bgmVolume: TextManager.getter("message", "bgmVolume"),
!   bgsVolume: TextManager.getter("message", "bgsVolume"),
!   meVolume: TextManager.getter("message", "meVolume"),
!   seVolume: TextManager.getter("message", "seVolume"),
!   possession: TextManager.getter("message", "possession"),
!   expTotal: TextManager.getter("message", "expTotal"),
!   expNext: TextManager.getter("message", "expNext"),
!   saveMessage: TextManager.getter("message", "saveMessage"),
!   loadMessage: TextManager.getter("message", "loadMessage"),
!   file: TextManager.getter("message", "file"),
!   partyName: TextManager.getter("message", "partyName"),
!   emerge: TextManager.getter("message", "emerge"),
!   preemptive: TextManager.getter("message", "preemptive"),
!   surprise: TextManager.getter("message", "surprise"),
!   escapeStart: TextManager.getter("message", "escapeStart"),
!   escapeFailure: TextManager.getter("message", "escapeFailure"),
!   victory: TextManager.getter("message", "victory"),
!   defeat: TextManager.getter("message", "defeat"),
!   obtainExp: TextManager.getter("message", "obtainExp"),
!   obtainGold: TextManager.getter("message", "obtainGold"),
!   obtainItem: TextManager.getter("message", "obtainItem"),
!   levelUp: TextManager.getter("message", "levelUp"),
!   obtainSkill: TextManager.getter("message", "obtainSkill"),
!   useItem: TextManager.getter("message", "useItem"),
!   criticalToEnemy: TextManager.getter("message", "criticalToEnemy"),
!   criticalToActor: TextManager.getter("message", "criticalToActor"),
!   actorDamage: TextManager.getter("message", "actorDamage"),
!   actorRecovery: TextManager.getter("message", "actorRecovery"),
!   actorGain: TextManager.getter("message", "actorGain"),
!   actorLoss: TextManager.getter("message", "actorLoss"),
!   actorDrain: TextManager.getter("message", "actorDrain"),
!   actorNoDamage: TextManager.getter("message", "actorNoDamage"),
!   actorNoHit: TextManager.getter("message", "actorNoHit"),
!   enemyDamage: TextManager.getter("message", "enemyDamage"),
!   enemyRecovery: TextManager.getter("message", "enemyRecovery"),
!   enemyGain: TextManager.getter("message", "enemyGain"),
!   enemyLoss: TextManager.getter("message", "enemyLoss"),
!   enemyDrain: TextManager.getter("message", "enemyDrain"),
!   enemyNoDamage: TextManager.getter("message", "enemyNoDamage"),
!   enemyNoHit: TextManager.getter("message", "enemyNoHit"),
!   evasion: TextManager.getter("message", "evasion"),
!   magicEvasion: TextManager.getter("message", "magicEvasion"),
!   magicReflection: TextManager.getter("message", "magicReflection"),
!   counterAttack: TextManager.getter("message", "counterAttack"),
!   substitute: TextManager.getter("message", "substitute"),
!   buffAdd: TextManager.getter("message", "buffAdd"),
!   debuffAdd: TextManager.getter("message", "debuffAdd"),
!   buffRemove: TextManager.getter("message", "buffRemove"),
!   actionFailure: TextManager.getter("message", "actionFailure"),
  });
  
  //-----------------------------------------------------------------------------
***************
*** 1774,1787 ****
  // The static class that manages scene transitions.
  
  function SceneManager() {
!     throw new Error('This is a static class');
  }
  
  /*
   * Gets the current time in ms without on iOS Safari.
   * @private
   */
! SceneManager._getTimeInMsWithoutMobileSafari = function() {
      return performance.now();
  };
  
--- 1789,1802 ----
  // The static class that manages scene transitions.
  
  function SceneManager() {
!   throw new Error("This is a static class");
  }
  
  /*
   * Gets the current time in ms without on iOS Safari.
   * @private
   */
! SceneManager._getTimeInMsWithoutMobileSafari = function () {
    return performance.now();
  };
  
***************
*** 1798,1807 ****
  SceneManager._boxWidth          = 816;
  SceneManager._boxHeight         = 624;
  SceneManager._deltaTime = 1.0 / 60.0;
! if (!Utils.isMobileSafari()) SceneManager._currentTime = SceneManager._getTimeInMsWithoutMobileSafari();
  SceneManager._accumulator = 0.0;
  
! SceneManager.run = function(sceneClass) {
      try {
          this.initialize();
          this.goto(sceneClass);
--- 1813,1823 ----
  SceneManager._boxWidth = 816;
  SceneManager._boxHeight = 624;
  SceneManager._deltaTime = 1.0 / 60.0;
! if (!Utils.isMobileSafari())
!   SceneManager._currentTime = SceneManager._getTimeInMsWithoutMobileSafari();
  SceneManager._accumulator = 0.0;
  
! SceneManager.run = function (sceneClass) {
    try {
      this.initialize();
      this.goto(sceneClass);
***************
*** 1811,1817 ****
      }
  };
  
! SceneManager.initialize = function() {
      this.initGraphics();
      this.checkFileAccess();
      this.initAudio();
--- 1827,1833 ----
    }
  };
  
! SceneManager.initialize = function () {
    this.initGraphics();
    this.checkFileAccess();
    this.initAudio();
***************
*** 1821,1880 ****
      this.setupErrorHandlers();
  };
  
! SceneManager.initGraphics = function() {
      var type = this.preferableRendererType();
      Graphics.initialize(this._screenWidth, this._screenHeight, type);
      Graphics.boxWidth = this._boxWidth;
      Graphics.boxHeight = this._boxHeight;
!     Graphics.setLoadingImage('img/system/Loading.png');
!     if (Utils.isOptionValid('showfps')) {
          Graphics.showFps();
      }
!     if (type === 'webgl') {
          this.checkWebGL();
      }
  };
  
! SceneManager.preferableRendererType = function() {
!     if (Utils.isOptionValid('canvas')) {
!         return 'canvas';
!     } else if (Utils.isOptionValid('webgl')) {
!         return 'webgl';
      } else {
!         return 'auto';
      }
  };
  
! SceneManager.shouldUseCanvasRenderer = function() {
      return Utils.isMobileDevice();
  };
  
! SceneManager.checkWebGL = function() {
      if (!Graphics.hasWebGL()) {
!         throw new Error('Your browser does not support WebGL.');
      }
  };
  
! SceneManager.checkFileAccess = function() {
      if (!Utils.canReadGameFiles()) {
!         throw new Error('Your browser does not allow to read local files.');
      }
  };
  
! SceneManager.initAudio = function() {
!     var noAudio = Utils.isOptionValid('noaudio');
      if (!WebAudio.initialize(noAudio) && !noAudio) {
!         throw new Error('Your browser does not support Web Audio API.');
      }
  };
  
! SceneManager.initInput = function() {
      Input.initialize();
      TouchInput.initialize();
  };
  
! SceneManager.initNwjs = function() {
!     if (Utils.isNwjs()) {
          var gui = require('nw.gui');
          var win = gui.Window.get();
          if (process.platform === 'darwin' && !win.menu) {
--- 1837,1896 ----
    this.setupErrorHandlers();
  };
  
! SceneManager.initGraphics = function () {
    var type = this.preferableRendererType();
    Graphics.initialize(this._screenWidth, this._screenHeight, type);
    Graphics.boxWidth = this._boxWidth;
    Graphics.boxHeight = this._boxHeight;
!   Graphics.setLoadingImage("img/system/Loading.png");
!   if (Utils.isOptionValid("showfps")) {
      Graphics.showFps();
    }
!   if (type === "webgl") {
      this.checkWebGL();
    }
  };
  
! SceneManager.preferableRendererType = function () {
!   if (Utils.isOptionValid("canvas")) {
!     return "canvas";
!   } else if (Utils.isOptionValid("webgl")) {
!     return "webgl";
    } else {
!     return "auto";
    }
  };
  
! SceneManager.shouldUseCanvasRenderer = function () {
    return Utils.isMobileDevice();
  };
  
! SceneManager.checkWebGL = function () {
    if (!Graphics.hasWebGL()) {
!     throw new Error("Your browser does not support WebGL.");
    }
  };
  
! SceneManager.checkFileAccess = function () {
    if (!Utils.canReadGameFiles()) {
!     throw new Error("Your browser does not allow to read local files.");
    }
  };
  
! SceneManager.initAudio = function () {
!   var noAudio = Utils.isOptionValid("noaudio");
    if (!WebAudio.initialize(noAudio) && !noAudio) {
!     throw new Error("Your browser does not support Web Audio API.");
    }
  };
  
! SceneManager.initInput = function () {
    Input.initialize();
    TouchInput.initialize();
  };
  
! SceneManager.initNwjs = function () {
!   /*if (Utils.isNwjs()) {
          var gui = require('nw.gui');
          var win = gui.Window.get();
          if (process.platform === 'darwin' && !win.menu) {
***************
*** 1883,1907 ****
              menubar.createMacBuiltin('Game', option);
              win.menu = menubar;
          }
!     }
  };
  
! SceneManager.checkPluginErrors = function() {
      PluginManager.checkErrors();
  };
  
! SceneManager.setupErrorHandlers = function() {
!     window.addEventListener('error', this.onError.bind(this));
!     document.addEventListener('keydown', this.onKeyDown.bind(this));
  };
  
! SceneManager.requestUpdate = function() {
      if (!this._stopped) {
          requestAnimationFrame(this.update.bind(this));
      }
  };
  
! SceneManager.update = function() {
      try {
          this.tickStart();
          if (Utils.isMobileSafari()) {
--- 1899,1923 ----
              menubar.createMacBuiltin('Game', option);
              win.menu = menubar;
          }
!     }*/
  };
  
! SceneManager.checkPluginErrors = function () {
    PluginManager.checkErrors();
  };
  
! SceneManager.setupErrorHandlers = function () {
!   window.addEventListener("error", this.onError.bind(this));
!   document.addEventListener("keydown", this.onKeyDown.bind(this));
  };
  
! SceneManager.requestUpdate = function () {
    if (!this._stopped) {
      requestAnimationFrame(this.update.bind(this));
    }
  };
  
! SceneManager.update = function () {
    try {
      this.tickStart();
      if (Utils.isMobileSafari()) {
***************
*** 1915,1936 ****
      }
  };
  
! SceneManager.terminate = function() {
      window.close();
  };
  
! SceneManager.onError = function(e) {
      console.error(e.message);
      console.error(e.filename, e.lineno);
      try {
          this.stop();
!         Graphics.printError('Error', e.message);
          AudioManager.stopAll();
!     } catch (e2) {
!     }
  };
  
! SceneManager.onKeyDown = function(event) {
      if (!event.ctrlKey && !event.altKey) {
          switch (event.keyCode) {
          case 116:   // F5
--- 1931,1951 ----
    }
  };
  
! SceneManager.terminate = function () {
    window.close();
  };
  
! SceneManager.onError = function (e) {
    console.error(e.message);
    console.error(e.filename, e.lineno);
    try {
      this.stop();
!     Graphics.printError("Error", e.message);
      AudioManager.stopAll();
!   } catch (e2) {}
  };
  
! SceneManager.onKeyDown = function (event) {
    if (!event.ctrlKey && !event.altKey) {
      switch (event.keyCode) {
        case 116: // F5
***************
*** 1939,1977 ****
              }
              break;
          case 119:   // F8
!             if (Utils.isNwjs() && Utils.isOptionValid('test')) {
                  require('nw.gui').Window.get().showDevTools();
!             }
              break;
          }
      }
  };
  
! SceneManager.catchException = function(e) {
      if (e instanceof Error) {
          Graphics.printError(e.name, e.message);
          console.error(e.stack);
      } else {
!         Graphics.printError('UnknownError', e);
      }
      AudioManager.stopAll();
      this.stop();
  };
  
! SceneManager.tickStart = function() {
      Graphics.tickStart();
  };
  
! SceneManager.tickEnd = function() {
      Graphics.tickEnd();
  };
  
! SceneManager.updateInputData = function() {
      Input.update();
      TouchInput.update();
  };
  
! SceneManager.updateMain = function() {
      if (Utils.isMobileSafari()) {
          this.changeScene();
          this.updateScene();
--- 1954,1992 ----
          }
          break;
        case 119: // F8
!         /*if (Utils.isNwjs() && Utils.isOptionValid('test')) {
                  require('nw.gui').Window.get().showDevTools();
!             }*/
          break;
      }
    }
  };
  
! SceneManager.catchException = function (e) {
    if (e instanceof Error) {
      Graphics.printError(e.name, e.message);
      console.error(e.stack);
    } else {
!     Graphics.printError("UnknownError", e);
    }
    AudioManager.stopAll();
    this.stop();
  };
  
! SceneManager.tickStart = function () {
    Graphics.tickStart();
  };
  
! SceneManager.tickEnd = function () {
    Graphics.tickEnd();
  };
  
! SceneManager.updateInputData = function () {
    Input.update();
    TouchInput.update();
  };
  
! SceneManager.updateMain = function () {
    if (Utils.isMobileSafari()) {
      this.changeScene();
      this.updateScene();
***************
*** 1992,2002 ****
      this.requestUpdate();
  };
  
! SceneManager.updateManagers = function() {
      ImageManager.update();
  };
  
! SceneManager.changeScene = function() {
      if (this.isSceneChanging() && !this.isCurrentSceneBusy()) {
          if (this._scene) {
              this._scene.terminate();
--- 2007,2017 ----
    this.requestUpdate();
  };
  
! SceneManager.updateManagers = function () {
    ImageManager.update();
  };
  
! SceneManager.changeScene = function () {
    if (this.isSceneChanging() && !this.isCurrentSceneBusy()) {
      if (this._scene) {
        this._scene.terminate();
***************
*** 2017,2023 ****
      }
  };
  
! SceneManager.updateScene = function() {
      if (this._scene) {
          if (!this._sceneStarted && this._scene.isReady()) {
              this._scene.start();
--- 2032,2038 ----
    }
  };
  
! SceneManager.updateScene = function () {
    if (this._scene) {
      if (!this._sceneStarted && this._scene.isReady()) {
        this._scene.start();
***************
*** 2030,2036 ****
      }
  };
  
! SceneManager.renderScene = function() {
      if (this.isCurrentSceneStarted()) {
          Graphics.render(this._scene);
      } else if (this._scene) {
--- 2045,2051 ----
    }
  };
  
! SceneManager.renderScene = function () {
    if (this.isCurrentSceneStarted()) {
      Graphics.render(this._scene);
    } else if (this._scene) {
***************
*** 2038,2076 ****
      }
  };
  
! SceneManager.onSceneCreate = function() {
      Graphics.startLoading();
  };
  
! SceneManager.onSceneStart = function() {
      Graphics.endLoading();
  };
  
! SceneManager.onSceneLoading = function() {
      Graphics.updateLoading();
  };
  
! SceneManager.isSceneChanging = function() {
      return this._exiting || !!this._nextScene;
  };
  
! SceneManager.isCurrentSceneBusy = function() {
      return this._scene && this._scene.isBusy();
  };
  
! SceneManager.isCurrentSceneStarted = function() {
      return this._scene && this._sceneStarted;
  };
  
! SceneManager.isNextScene = function(sceneClass) {
      return this._nextScene && this._nextScene.constructor === sceneClass;
  };
  
! SceneManager.isPreviousScene = function(sceneClass) {
      return this._previousClass === sceneClass;
  };
  
! SceneManager.goto = function(sceneClass) {
      if (sceneClass) {
          this._nextScene = new sceneClass();
      }
--- 2053,2091 ----
    }
  };
  
! SceneManager.onSceneCreate = function () {
    Graphics.startLoading();
  };
  
! SceneManager.onSceneStart = function () {
    Graphics.endLoading();
  };
  
! SceneManager.onSceneLoading = function () {
    Graphics.updateLoading();
  };
  
! SceneManager.isSceneChanging = function () {
    return this._exiting || !!this._nextScene;
  };
  
! SceneManager.isCurrentSceneBusy = function () {
    return this._scene && this._scene.isBusy();
  };
  
! SceneManager.isCurrentSceneStarted = function () {
    return this._scene && this._sceneStarted;
  };
  
! SceneManager.isNextScene = function (sceneClass) {
    return this._nextScene && this._nextScene.constructor === sceneClass;
  };
  
! SceneManager.isPreviousScene = function (sceneClass) {
    return this._previousClass === sceneClass;
  };
  
! SceneManager.goto = function (sceneClass) {
    if (sceneClass) {
      this._nextScene = new sceneClass();
    }
***************
*** 2079,2090 ****
      }
  };
  
! SceneManager.push = function(sceneClass) {
      this._stack.push(this._scene.constructor);
      this.goto(sceneClass);
  };
  
! SceneManager.pop = function() {
      if (this._stack.length > 0) {
          this.goto(this._stack.pop());
      } else {
--- 2094,2105 ----
    }
  };
  
! SceneManager.push = function (sceneClass) {
    this._stack.push(this._scene.constructor);
    this.goto(sceneClass);
  };
  
! SceneManager.pop = function () {
    if (this._stack.length > 0) {
      this.goto(this._stack.pop());
    } else {
***************
*** 2092,2128 ****
      }
  };
  
! SceneManager.exit = function() {
      this.goto(null);
      this._exiting = true;
  };
  
! SceneManager.clearStack = function() {
      this._stack = [];
  };
  
! SceneManager.stop = function() {
      this._stopped = true;
  };
  
! SceneManager.prepareNextScene = function() {
      this._nextScene.prepare.apply(this._nextScene, arguments);
  };
  
! SceneManager.snap = function() {
      return Bitmap.snap(this._scene);
  };
  
! SceneManager.snapForBackground = function() {
      this._backgroundBitmap = this.snap();
      this._backgroundBitmap.blur();
  };
  
! SceneManager.backgroundBitmap = function() {
      return this._backgroundBitmap;
  };
  
! SceneManager.resume = function() {
      this._stopped = false;
      this.requestUpdate();
      if (!Utils.isMobileSafari()) {
--- 2107,2143 ----
    }
  };
  
! SceneManager.exit = function () {
    this.goto(null);
    this._exiting = true;
  };
  
! SceneManager.clearStack = function () {
    this._stack = [];
  };
  
! SceneManager.stop = function () {
    this._stopped = true;
  };
  
! SceneManager.prepareNextScene = function () {
    this._nextScene.prepare.apply(this._nextScene, arguments);
  };
  
! SceneManager.snap = function () {
    return Bitmap.snap(this._scene);
  };
  
! SceneManager.snapForBackground = function () {
    this._backgroundBitmap = this.snap();
    this._backgroundBitmap.blur();
  };
  
! SceneManager.backgroundBitmap = function () {
    return this._backgroundBitmap;
  };
  
! SceneManager.resume = function () {
    this._stopped = false;
    this.requestUpdate();
    if (!Utils.isMobileSafari()) {
***************
*** 2137,2146 ****
  // The static class that manages battle progress.
  
  function BattleManager() {
!     throw new Error('This is a static class');
  }
  
! BattleManager.setup = function(troopId, canEscape, canLose) {
      this.initMembers();
      this._canEscape = canEscape;
      this._canLose = canLose;
--- 2152,2161 ----
  // The static class that manages battle progress.
  
  function BattleManager() {
!   throw new Error("This is a static class");
  }
  
! BattleManager.setup = function (troopId, canEscape, canLose) {
    this.initMembers();
    this._canEscape = canEscape;
    this._canLose = canLose;
***************
*** 2149,2156 ****
      this.makeEscapeRatio();
  };
  
! BattleManager.initMembers = function() {
!     this._phase = 'init';
      this._canEscape = false;
      this._canLose = false;
      this._battleTest = false;
--- 2164,2171 ----
    this.makeEscapeRatio();
  };
  
! BattleManager.initMembers = function () {
!   this._phase = "init";
    this._canEscape = false;
    this._canLose = false;
    this._battleTest = false;
***************
*** 2174,2235 ****
      this._turnForced = false;
  };
  
! BattleManager.isBattleTest = function() {
      return this._battleTest;
  };
  
! BattleManager.setBattleTest = function(battleTest) {
      this._battleTest = battleTest;
  };
  
! BattleManager.setEventCallback = function(callback) {
      this._eventCallback = callback;
  };
  
! BattleManager.setLogWindow = function(logWindow) {
      this._logWindow = logWindow;
  };
  
! BattleManager.setStatusWindow = function(statusWindow) {
      this._statusWindow = statusWindow;
  };
  
! BattleManager.setSpriteset = function(spriteset) {
      this._spriteset = spriteset;
  };
  
! BattleManager.onEncounter = function() {
!     this._preemptive = (Math.random() < this.ratePreemptive());
!     this._surprise = (Math.random() < this.rateSurprise() && !this._preemptive);
  };
  
! BattleManager.ratePreemptive = function() {
      return $gameParty.ratePreemptive($gameTroop.agility());
  };
  
! BattleManager.rateSurprise = function() {
      return $gameParty.rateSurprise($gameTroop.agility());
  };
  
! BattleManager.saveBgmAndBgs = function() {
      this._mapBgm = AudioManager.saveBgm();
      this._mapBgs = AudioManager.saveBgs();
  };
  
! BattleManager.playBattleBgm = function() {
      AudioManager.playBgm($gameSystem.battleBgm());
      AudioManager.stopBgs();
  };
  
! BattleManager.playVictoryMe = function() {
      AudioManager.playMe($gameSystem.victoryMe());
  };
  
! BattleManager.playDefeatMe = function() {
      AudioManager.playMe($gameSystem.defeatMe());
  };
  
! BattleManager.replayBgmAndBgs = function() {
      if (this._mapBgm) {
          AudioManager.replayBgm(this._mapBgm);
      } else {
--- 2189,2250 ----
    this._turnForced = false;
  };
  
! BattleManager.isBattleTest = function () {
    return this._battleTest;
  };
  
! BattleManager.setBattleTest = function (battleTest) {
    this._battleTest = battleTest;
  };
  
! BattleManager.setEventCallback = function (callback) {
    this._eventCallback = callback;
  };
  
! BattleManager.setLogWindow = function (logWindow) {
    this._logWindow = logWindow;
  };
  
! BattleManager.setStatusWindow = function (statusWindow) {
    this._statusWindow = statusWindow;
  };
  
! BattleManager.setSpriteset = function (spriteset) {
    this._spriteset = spriteset;
  };
  
! BattleManager.onEncounter = function () {
!   this._preemptive = Math.random() < this.ratePreemptive();
!   this._surprise = Math.random() < this.rateSurprise() && !this._preemptive;
  };
  
! BattleManager.ratePreemptive = function () {
    return $gameParty.ratePreemptive($gameTroop.agility());
  };
  
! BattleManager.rateSurprise = function () {
    return $gameParty.rateSurprise($gameTroop.agility());
  };
  
! BattleManager.saveBgmAndBgs = function () {
    this._mapBgm = AudioManager.saveBgm();
    this._mapBgs = AudioManager.saveBgs();
  };
  
! BattleManager.playBattleBgm = function () {
    AudioManager.playBgm($gameSystem.battleBgm());
    AudioManager.stopBgs();
  };
  
! BattleManager.playVictoryMe = function () {
    AudioManager.playMe($gameSystem.victoryMe());
  };
  
! BattleManager.playDefeatMe = function () {
    AudioManager.playMe($gameSystem.defeatMe());
  };
  
! BattleManager.replayBgmAndBgs = function () {
    if (this._mapBgm) {
      AudioManager.replayBgm(this._mapBgm);
    } else {
***************
*** 2240,2276 ****
      }
  };
  
! BattleManager.makeEscapeRatio = function() {
!     this._escapeRatio = 0.5 * $gameParty.agility() / $gameTroop.agility();
  };
  
! BattleManager.update = function() {
      if (!this.isBusy() && !this.updateEvent()) {
          switch (this._phase) {
!         case 'start':
              this.startInput();
              break;
!         case 'turn':
              this.updateTurn();
              break;
!         case 'action':
              this.updateAction();
              break;
!         case 'turnEnd':
              this.updateTurnEnd();
              break;
!         case 'battleEnd':
              this.updateBattleEnd();
              break;
          }
      }
  };
  
! BattleManager.updateEvent = function() {
      switch (this._phase) {
!         case 'start':
!         case 'turn':
!         case 'turnEnd':
              if (this.isActionForced()) {
                  this.processForcedAction();
                  return true;
--- 2255,2291 ----
    }
  };
  
! BattleManager.makeEscapeRatio = function () {
!   this._escapeRatio = (0.5 * $gameParty.agility()) / $gameTroop.agility();
  };
  
! BattleManager.update = function () {
    if (!this.isBusy() && !this.updateEvent()) {
      switch (this._phase) {
!       case "start":
          this.startInput();
          break;
!       case "turn":
          this.updateTurn();
          break;
!       case "action":
          this.updateAction();
          break;
!       case "turnEnd":
          this.updateTurnEnd();
          break;
!       case "battleEnd":
          this.updateBattleEnd();
          break;
      }
    }
  };
  
! BattleManager.updateEvent = function () {
    switch (this._phase) {
!     case "start":
!     case "turn":
!     case "turnEnd":
        if (this.isActionForced()) {
          this.processForcedAction();
          return true;
***************
*** 2281,2287 ****
      return this.checkAbort();
  };
  
! BattleManager.updateEventMain = function() {
      $gameTroop.updateInterpreter();
      $gameParty.requestMotionRefresh();
      if ($gameTroop.isEventRunning() || this.checkBattleEnd()) {
--- 2296,2302 ----
    return this.checkAbort();
  };
  
! BattleManager.updateEventMain = function () {
    $gameTroop.updateInterpreter();
    $gameParty.requestMotionRefresh();
    if ($gameTroop.isEventRunning() || this.checkBattleEnd()) {
***************
*** 2294,2345 ****
      return false;
  };
  
! BattleManager.isBusy = function() {
!     return ($gameMessage.isBusy() || this._spriteset.isBusy() ||
!             this._logWindow.isBusy());
  };
  
! BattleManager.isInputting = function() {
!     return this._phase === 'input';
  };
  
! BattleManager.isInTurn = function() {
!     return this._phase === 'turn';
  };
  
! BattleManager.isTurnEnd = function() {
!     return this._phase === 'turnEnd';
  };
  
! BattleManager.isAborting = function() {
!     return this._phase === 'aborting';
  };
  
! BattleManager.isBattleEnd = function() {
!     return this._phase === 'battleEnd';
  };
  
! BattleManager.canEscape = function() {
      return this._canEscape;
  };
  
! BattleManager.canLose = function() {
      return this._canLose;
  };
  
! BattleManager.isEscaped = function() {
      return this._escaped;
  };
  
! BattleManager.actor = function() {
      return this._actorIndex >= 0 ? $gameParty.members()[this._actorIndex] : null;
  };
  
! BattleManager.clearActor = function() {
!     this.changeActor(-1, '');
  };
  
! BattleManager.changeActor = function(newActorIndex, lastActorActionState) {
      var lastActor = this.actor();
      this._actorIndex = newActorIndex;
      var newActor = this.actor();
--- 2309,2363 ----
    return false;
  };
  
! BattleManager.isBusy = function () {
!   return (
!     $gameMessage.isBusy() ||
!     this._spriteset.isBusy() ||
!     this._logWindow.isBusy()
!   );
  };
  
! BattleManager.isInputting = function () {
!   return this._phase === "input";
  };
  
! BattleManager.isInTurn = function () {
!   return this._phase === "turn";
  };
  
! BattleManager.isTurnEnd = function () {
!   return this._phase === "turnEnd";
  };
  
! BattleManager.isAborting = function () {
!   return this._phase === "aborting";
  };
  
! BattleManager.isBattleEnd = function () {
!   return this._phase === "battleEnd";
  };
  
! BattleManager.canEscape = function () {
    return this._canEscape;
  };
  
! BattleManager.canLose = function () {
    return this._canLose;
  };
  
! BattleManager.isEscaped = function () {
    return this._escaped;
  };
  
! BattleManager.actor = function () {
    return this._actorIndex >= 0 ? $gameParty.members()[this._actorIndex] : null;
  };
  
! BattleManager.clearActor = function () {
!   this.changeActor(-1, "");
  };
  
! BattleManager.changeActor = function (newActorIndex, lastActorActionState) {
    var lastActor = this.actor();
    this._actorIndex = newActorIndex;
    var newActor = this.actor();
***************
*** 2347,2366 ****
          lastActor.setActionState(lastActorActionState);
      }
      if (newActor) {
!         newActor.setActionState('inputting');
      }
  };
  
! BattleManager.startBattle = function() {
!     this._phase = 'start';
      $gameSystem.onBattleStart();
      $gameParty.onBattleStart();
      $gameTroop.onBattleStart();
      this.displayStartMessages();
  };
  
! BattleManager.displayStartMessages = function() {
!     $gameTroop.enemyNames().forEach(function(name) {
          $gameMessage.add(TextManager.emerge.format(name));
      });
      if (this._preemptive) {
--- 2365,2384 ----
      lastActor.setActionState(lastActorActionState);
    }
    if (newActor) {
!     newActor.setActionState("inputting");
    }
  };
  
! BattleManager.startBattle = function () {
!   this._phase = "start";
    $gameSystem.onBattleStart();
    $gameParty.onBattleStart();
    $gameTroop.onBattleStart();
    this.displayStartMessages();
  };
  
! BattleManager.displayStartMessages = function () {
!   $gameTroop.enemyNames().forEach(function (name) {
      $gameMessage.add(TextManager.emerge.format(name));
    });
    if (this._preemptive) {
***************
*** 2370,2377 ****
      }
  };
  
! BattleManager.startInput = function() {
!     this._phase = 'input';
      $gameParty.makeActions();
      $gameTroop.makeActions();
      this.clearActor();
--- 2388,2395 ----
    }
  };
  
! BattleManager.startInput = function () {
!   this._phase = "input";
    $gameParty.makeActions();
    $gameTroop.makeActions();
    this.clearActor();
***************
*** 2380,2393 ****
      }
  };
  
! BattleManager.inputtingAction = function() {
      return this.actor() ? this.actor().inputtingAction() : null;
  };
  
! BattleManager.selectNextCommand = function() {
      do {
          if (!this.actor() || !this.actor().selectNextCommand()) {
!             this.changeActor(this._actorIndex + 1, 'waiting');
              if (this._actorIndex >= $gameParty.size()) {
                  this.startTurn();
                  break;
--- 2398,2411 ----
    }
  };
  
! BattleManager.inputtingAction = function () {
    return this.actor() ? this.actor().inputtingAction() : null;
  };
  
! BattleManager.selectNextCommand = function () {
    do {
      if (!this.actor() || !this.actor().selectNextCommand()) {
!       this.changeActor(this._actorIndex + 1, "waiting");
        if (this._actorIndex >= $gameParty.size()) {
          this.startTurn();
          break;
***************
*** 2396,2405 ****
      } while (!this.actor().canInput());
  };
  
! BattleManager.selectPreviousCommand = function() {
      do {
          if (!this.actor() || !this.actor().selectPreviousCommand()) {
!             this.changeActor(this._actorIndex - 1, 'undecided');
              if (this._actorIndex < 0) {
                  return;
              }
--- 2414,2423 ----
    } while (!this.actor().canInput());
  };
  
! BattleManager.selectPreviousCommand = function () {
    do {
      if (!this.actor() || !this.actor().selectPreviousCommand()) {
!       this.changeActor(this._actorIndex - 1, "undecided");
        if (this._actorIndex < 0) {
          return;
        }
***************
*** 2407,2418 ****
      } while (!this.actor().canInput());
  };
  
! BattleManager.refreshStatus = function() {
      this._statusWindow.refresh();
  };
  
! BattleManager.startTurn = function() {
!     this._phase = 'turn';
      this.clearActor();
      $gameTroop.increaseTurn();
      this.makeActionOrders();
--- 2425,2436 ----
    } while (!this.actor().canInput());
  };
  
! BattleManager.refreshStatus = function () {
    this._statusWindow.refresh();
  };
  
! BattleManager.startTurn = function () {
!   this._phase = "turn";
    this.clearActor();
    $gameTroop.increaseTurn();
    this.makeActionOrders();
***************
*** 2420,2426 ****
      this._logWindow.startTurn();
  };
  
! BattleManager.updateTurn = function() {
      $gameParty.requestMotionRefresh();
      if (!this._subject) {
          this._subject = this.getNextSubject();
--- 2438,2444 ----
    this._logWindow.startTurn();
  };
  
! BattleManager.updateTurn = function () {
    $gameParty.requestMotionRefresh();
    if (!this._subject) {
      this._subject = this.getNextSubject();
***************
*** 2432,2438 ****
      }
  };
  
! BattleManager.processTurn = function() {
      var subject = this._subject;
      var action = subject.currentAction();
      if (action) {
--- 2450,2456 ----
    }
  };
  
! BattleManager.processTurn = function () {
    var subject = this._subject;
    var action = subject.currentAction();
    if (action) {
***************
*** 2451,2461 ****
      }
  };
  
! BattleManager.endTurn = function() {
!     this._phase = 'turnEnd';
      this._preemptive = false;
      this._surprise = false;
!     this.allBattleMembers().forEach(function(battler) {
          battler.onTurnEnd();
          this.refreshStatus();
          this._logWindow.displayAutoAffectedStatus(battler);
--- 2469,2479 ----
    }
  };
  
! BattleManager.endTurn = function () {
!   this._phase = "turnEnd";
    this._preemptive = false;
    this._surprise = false;
!   this.allBattleMembers().forEach(function (battler) {
      battler.onTurnEnd();
      this.refreshStatus();
      this._logWindow.displayAutoAffectedStatus(battler);
***************
*** 2470,2480 ****
      return this._turnForced;
  };
  
! BattleManager.updateTurnEnd = function() {
      this.startInput();
  };
  
! BattleManager.getNextSubject = function() {
      for (;;) {
          var battler = this._actionBattlers.shift();
          if (!battler) {
--- 2488,2498 ----
    return this._turnForced;
  };
  
! BattleManager.updateTurnEnd = function () {
    this.startInput();
  };
  
! BattleManager.getNextSubject = function () {
    for (;;) {
      var battler = this._actionBattlers.shift();
      if (!battler) {
***************
*** 2486,2496 ****
      }
  };
  
! BattleManager.allBattleMembers = function() {
      return $gameParty.members().concat($gameTroop.members());
  };
  
! BattleManager.makeActionOrders = function() {
      var battlers = [];
      if (!this._surprise) {
          battlers = battlers.concat($gameParty.members());
--- 2504,2514 ----
    }
  };
  
! BattleManager.allBattleMembers = function () {
    return $gameParty.members().concat($gameTroop.members());
  };
  
! BattleManager.makeActionOrders = function () {
    var battlers = [];
    if (!this._surprise) {
      battlers = battlers.concat($gameParty.members());
***************
*** 2498,2517 ****
      if (!this._preemptive) {
          battlers = battlers.concat($gameTroop.members());
      }
!     battlers.forEach(function(battler) {
          battler.makeSpeed();
      });
!     battlers.sort(function(a, b) {
          return b.speed() - a.speed();
      });
      this._actionBattlers = battlers;
  };
  
! BattleManager.startAction = function() {
      var subject = this._subject;
      var action = subject.currentAction();
      var targets = action.makeTargets();
!     this._phase = 'action';
      this._action = action;
      this._targets = targets;
      subject.useItem(action.item());
--- 2516,2535 ----
    if (!this._preemptive) {
      battlers = battlers.concat($gameTroop.members());
    }
!   battlers.forEach(function (battler) {
      battler.makeSpeed();
    });
!   battlers.sort(function (a, b) {
      return b.speed() - a.speed();
    });
    this._actionBattlers = battlers;
  };
  
! BattleManager.startAction = function () {
    var subject = this._subject;
    var action = subject.currentAction();
    var targets = action.makeTargets();
!   this._phase = "action";
    this._action = action;
    this._targets = targets;
    subject.useItem(action.item());
***************
*** 2520,2526 ****
      this._logWindow.startAction(subject, action, targets);
  };
  
! BattleManager.updateAction = function() {
      var target = this._targets.shift();
      if (target) {
          this.invokeAction(this._subject, target);
--- 2538,2544 ----
    this._logWindow.startAction(subject, action, targets);
  };
  
! BattleManager.updateAction = function () {
    var target = this._targets.shift();
    if (target) {
      this.invokeAction(this._subject, target);
***************
*** 2529,2541 ****
      }
  };
  
! BattleManager.endAction = function() {
      this._logWindow.endAction(this._subject);
!     this._phase = 'turn';
  };
  
! BattleManager.invokeAction = function(subject, target) {
!     this._logWindow.push('pushBaseLine');
      if (Math.random() < this._action.itemCnt(target)) {
          this.invokeCounterAttack(subject, target);
      } else if (Math.random() < this._action.itemMrf(target)) {
--- 2547,2559 ----
    }
  };
  
! BattleManager.endAction = function () {
    this._logWindow.endAction(this._subject);
!   this._phase = "turn";
  };
  
! BattleManager.invokeAction = function (subject, target) {
!   this._logWindow.push("pushBaseLine");
    if (Math.random() < this._action.itemCnt(target)) {
      this.invokeCounterAttack(subject, target);
    } else if (Math.random() < this._action.itemMrf(target)) {
***************
*** 2544,2560 ****
          this.invokeNormalAction(subject, target);
      }
      subject.setLastTarget(target);
!     this._logWindow.push('popBaseLine');
      this.refreshStatus();
  };
  
! BattleManager.invokeNormalAction = function(subject, target) {
      var realTarget = this.applySubstitute(target);
      this._action.apply(realTarget);
      this._logWindow.displayActionResults(subject, realTarget);
  };
  
! BattleManager.invokeCounterAttack = function(subject, target) {
      var action = new Game_Action(target);
      action.setAttack();
      action.apply(subject);
--- 2562,2578 ----
      this.invokeNormalAction(subject, target);
    }
    subject.setLastTarget(target);
!   this._logWindow.push("popBaseLine");
    this.refreshStatus();
  };
  
! BattleManager.invokeNormalAction = function (subject, target) {
    var realTarget = this.applySubstitute(target);
    this._action.apply(realTarget);
    this._logWindow.displayActionResults(subject, realTarget);
  };
  
! BattleManager.invokeCounterAttack = function (subject, target) {
    var action = new Game_Action(target);
    action.setAttack();
    action.apply(subject);
***************
*** 2562,2575 ****
      this._logWindow.displayActionResults(target, subject);
  };
  
! BattleManager.invokeMagicReflection = function(subject, target) {
  	this._action._reflectionTarget = target;
      this._logWindow.displayReflection(target);
      this._action.apply(subject);
      this._logWindow.displayActionResults(target, subject);
  };
  
! BattleManager.applySubstitute = function(target) {
      if (this.checkSubstitute(target)) {
          var substitute = target.friendsUnit().substituteBattler();
          if (substitute && target !== substitute) {
--- 2580,2593 ----
    this._logWindow.displayActionResults(target, subject);
  };
  
! BattleManager.invokeMagicReflection = function (subject, target) {
    this._action._reflectionTarget = target;
    this._logWindow.displayReflection(target);
    this._action.apply(subject);
    this._logWindow.displayActionResults(target, subject);
  };
  
! BattleManager.applySubstitute = function (target) {
    if (this.checkSubstitute(target)) {
      var substitute = target.friendsUnit().substituteBattler();
      if (substitute && target !== substitute) {
***************
*** 2580,2594 ****
      return target;
  };
  
! BattleManager.checkSubstitute = function(target) {
      return target.isDying() && !this._action.isCertainHit();
  };
  
! BattleManager.isActionForced = function() {
      return !!this._actionForcedBattler;
  };
  
! BattleManager.forceAction = function(battler) {
      this._actionForcedBattler = battler;
      var index = this._actionBattlers.indexOf(battler);
      if (index >= 0) {
--- 2598,2612 ----
    return target;
  };
  
! BattleManager.checkSubstitute = function (target) {
    return target.isDying() && !this._action.isCertainHit();
  };
  
! BattleManager.isActionForced = function () {
    return !!this._actionForcedBattler;
  };
  
! BattleManager.forceAction = function (battler) {
    this._actionForcedBattler = battler;
    var index = this._actionBattlers.indexOf(battler);
    if (index >= 0) {
***************
*** 2596,2602 ****
      }
  };
  
! BattleManager.processForcedAction = function() {
      if (this._actionForcedBattler) {
          this._turnForced = true;
          this._subject = this._actionForcedBattler;
--- 2614,2620 ----
    }
  };
  
! BattleManager.processForcedAction = function () {
    if (this._actionForcedBattler) {
      this._turnForced = true;
      this._subject = this._actionForcedBattler;
***************
*** 2606,2616 ****
      }
  };
  
! BattleManager.abort = function() {
!     this._phase = 'aborting';
  };
  
! BattleManager.checkBattleEnd = function() {
      if (this._phase) {
          if (this.checkAbort()) {
              return true;
--- 2624,2634 ----
    }
  };
  
! BattleManager.abort = function () {
!   this._phase = "aborting";
  };
  
! BattleManager.checkBattleEnd = function () {
    if (this._phase) {
      if (this.checkAbort()) {
        return true;
***************
*** 2625,2631 ****
      return false;
  };
  
! BattleManager.checkAbort = function() {
      if ($gameParty.isEmpty() || this.isAborting()) {
          SoundManager.playEscape();
          this._escaped = true;
--- 2643,2649 ----
    return false;
  };
  
! BattleManager.checkAbort = function () {
    if ($gameParty.isEmpty() || this.isAborting()) {
      SoundManager.playEscape();
      this._escaped = true;
***************
*** 2634,2640 ****
      return false;
  };
  
! BattleManager.processVictory = function() {
      $gameParty.removeBattleStates();
      $gameParty.performVictory();
      this.playVictoryMe();
--- 2652,2658 ----
    return false;
  };
  
! BattleManager.processVictory = function () {
    $gameParty.removeBattleStates();
    $gameParty.performVictory();
    this.playVictoryMe();
***************
*** 2646,2655 ****
      this.endBattle(0);
  };
  
! BattleManager.processEscape = function() {
      $gameParty.performEscape();
      SoundManager.playEscape();
!     var success = this._preemptive ? true : (Math.random() < this._escapeRatio);
      if (success) {
          this.displayEscapeSuccessMessage();
          this._escaped = true;
--- 2664,2673 ----
    this.endBattle(0);
  };
  
! BattleManager.processEscape = function () {
    $gameParty.performEscape();
    SoundManager.playEscape();
!   var success = this._preemptive ? true : Math.random() < this._escapeRatio;
    if (success) {
      this.displayEscapeSuccessMessage();
      this._escaped = true;
***************
*** 2663,2675 ****
      return success;
  };
  
! BattleManager.processAbort = function() {
      $gameParty.removeBattleStates();
      this.replayBgmAndBgs();
      this.endBattle(1);
  };
  
! BattleManager.processDefeat = function() {
      this.displayDefeatMessage();
      this.playDefeatMe();
      if (this._canLose) {
--- 2681,2693 ----
    return success;
  };
  
! BattleManager.processAbort = function () {
    $gameParty.removeBattleStates();
    this.replayBgmAndBgs();
    this.endBattle(1);
  };
  
! BattleManager.processDefeat = function () {
    this.displayDefeatMessage();
    this.playDefeatMe();
    if (this._canLose) {
***************
*** 2680,2687 ****
      this.endBattle(2);
  };
  
! BattleManager.endBattle = function(result) {
!     this._phase = 'battleEnd';
      if (this._eventCallback) {
          this._eventCallback(result);
      }
--- 2698,2705 ----
    this.endBattle(2);
  };
  
! BattleManager.endBattle = function (result) {
!   this._phase = "battleEnd";
    if (this._eventCallback) {
      this._eventCallback(result);
    }
***************
*** 2692,2698 ****
      }
  };
  
! BattleManager.updateBattleEnd = function() {
      if (this.isBattleTest()) {
          AudioManager.stopBgm();
          SceneManager.exit();
--- 2710,2716 ----
    }
  };
  
! BattleManager.updateBattleEnd = function () {
    if (this.isBattleTest()) {
      AudioManager.stopBgm();
      SceneManager.exit();
***************
*** 2709,2789 ****
      this._phase = null;
  };
  
! BattleManager.makeRewards = function() {
      this._rewards = {};
      this._rewards.gold = $gameTroop.goldTotal();
      this._rewards.exp = $gameTroop.expTotal();
      this._rewards.items = $gameTroop.makeDropItems();
  };
  
! BattleManager.displayVictoryMessage = function() {
      $gameMessage.add(TextManager.victory.format($gameParty.name()));
  };
  
! BattleManager.displayDefeatMessage = function() {
      $gameMessage.add(TextManager.defeat.format($gameParty.name()));
  };
  
! BattleManager.displayEscapeSuccessMessage = function() {
      $gameMessage.add(TextManager.escapeStart.format($gameParty.name()));
  };
  
! BattleManager.displayEscapeFailureMessage = function() {
      $gameMessage.add(TextManager.escapeStart.format($gameParty.name()));
!     $gameMessage.add('\\.' + TextManager.escapeFailure);
  };
  
! BattleManager.displayRewards = function() {
      this.displayExp();
      this.displayGold();
      this.displayDropItems();
  };
  
! BattleManager.displayExp = function() {
      var exp = this._rewards.exp;
      if (exp > 0) {
          var text = TextManager.obtainExp.format(exp, TextManager.exp);
!         $gameMessage.add('\\.' + text);
      }
  };
  
! BattleManager.displayGold = function() {
      var gold = this._rewards.gold;
      if (gold > 0) {
!         $gameMessage.add('\\.' + TextManager.obtainGold.format(gold));
      }
  };
  
! BattleManager.displayDropItems = function() {
      var items = this._rewards.items;
      if (items.length > 0) {
          $gameMessage.newPage();
!         items.forEach(function(item) {
              $gameMessage.add(TextManager.obtainItem.format(item.name));
          });
      }
  };
  
! BattleManager.gainRewards = function() {
      this.gainExp();
      this.gainGold();
      this.gainDropItems();
  };
  
! BattleManager.gainExp = function() {
      var exp = this._rewards.exp;
!     $gameParty.allMembers().forEach(function(actor) {
          actor.gainExp(exp);
      });
  };
  
! BattleManager.gainGold = function() {
      $gameParty.gainGold(this._rewards.gold);
  };
  
! BattleManager.gainDropItems = function() {
      var items = this._rewards.items;
!     items.forEach(function(item) {
          $gameParty.gainItem(item, 1);
      });
  };
--- 2727,2807 ----
    this._phase = null;
  };
  
! BattleManager.makeRewards = function () {
    this._rewards = {};
    this._rewards.gold = $gameTroop.goldTotal();
    this._rewards.exp = $gameTroop.expTotal();
    this._rewards.items = $gameTroop.makeDropItems();
  };
  
! BattleManager.displayVictoryMessage = function () {
    $gameMessage.add(TextManager.victory.format($gameParty.name()));
  };
  
! BattleManager.displayDefeatMessage = function () {
    $gameMessage.add(TextManager.defeat.format($gameParty.name()));
  };
  
! BattleManager.displayEscapeSuccessMessage = function () {
    $gameMessage.add(TextManager.escapeStart.format($gameParty.name()));
  };
  
! BattleManager.displayEscapeFailureMessage = function () {
    $gameMessage.add(TextManager.escapeStart.format($gameParty.name()));
!   $gameMessage.add("\\." + TextManager.escapeFailure);
  };
  
! BattleManager.displayRewards = function () {
    this.displayExp();
    this.displayGold();
    this.displayDropItems();
  };
  
! BattleManager.displayExp = function () {
    var exp = this._rewards.exp;
    if (exp > 0) {
      var text = TextManager.obtainExp.format(exp, TextManager.exp);
!     $gameMessage.add("\\." + text);
    }
  };
  
! BattleManager.displayGold = function () {
    var gold = this._rewards.gold;
    if (gold > 0) {
!     $gameMessage.add("\\." + TextManager.obtainGold.format(gold));
    }
  };
  
! BattleManager.displayDropItems = function () {
    var items = this._rewards.items;
    if (items.length > 0) {
      $gameMessage.newPage();
!     items.forEach(function (item) {
        $gameMessage.add(TextManager.obtainItem.format(item.name));
      });
    }
  };
  
! BattleManager.gainRewards = function () {
    this.gainExp();
    this.gainGold();
    this.gainDropItems();
  };
  
! BattleManager.gainExp = function () {
    var exp = this._rewards.exp;
!   $gameParty.allMembers().forEach(function (actor) {
      actor.gainExp(exp);
    });
  };
  
! BattleManager.gainGold = function () {
    $gameParty.gainGold(this._rewards.gold);
  };
  
! BattleManager.gainDropItems = function () {
    var items = this._rewards.items;
!   items.forEach(function (item) {
      $gameParty.gainItem(item, 1);
    });
  };
***************
*** 2794,2836 ****
  // The static class that manages the plugins.
  
  function PluginManager() {
!     throw new Error('This is a static class');
  }
  
! PluginManager._path         = 'js/plugins/';
  PluginManager._scripts      = [];
  PluginManager._errorUrls    = [];
  PluginManager._parameters   = {};
  
! PluginManager.setup = function(plugins) {
!     plugins.forEach(function(plugin) {
          if (plugin.status && !this._scripts.contains(plugin.name)) {
              this.setParameters(plugin.name, plugin.parameters);
!             this.loadScript(plugin.name + '.js');
              this._scripts.push(plugin.name);
          }
      }, this);
  };
  
! PluginManager.checkErrors = function() {
      var url = this._errorUrls.shift();
      if (url) {
!         throw new Error('Failed to load: ' + url);
      }
  };
  
! PluginManager.parameters = function(name) {
      return this._parameters[name.toLowerCase()] || {};
  };
  
! PluginManager.setParameters = function(name, parameters) {
      this._parameters[name.toLowerCase()] = parameters;
  };
  
! PluginManager.loadScript = function(name) {
      var url = this._path + name;
!     var script = document.createElement('script');
!     script.type = 'text/javascript';
      script.src = url;
      script.async = false;
      script.onerror = this.onError.bind(this);
--- 2812,2884 ----
  // The static class that manages the plugins.
  
  function PluginManager() {
!   throw new Error("This is a static class");
  }
  
! PluginManager._path = "js/plugins/";
  PluginManager._scripts = [];
  PluginManager._errorUrls = [];
  PluginManager._parameters = {};
  
! PluginManager.setup = function (plugins) {
!   let whitelist = [
!     "text_language_processor",
!     "ysp_videoplayer",
!     "olivia_horroreffects",
!     "yep_utilitycommonevents",
!     "yep_x_animatedsvenemies",
!     "yep_autopassivestates",
!     "tds text effects",
!   ];
!   let keywords = [
!     "core",
!     "load",
!     "control",
!     "base",
!     "manage",
!     "omori",
!     "language",
!     "1",
!     "yep_x_actseqpack",
!     "gacha",
!   ];
!   plugins.forEach(function (plugin) {
!     let lower = plugin.name.toString().toLowerCase();
!     let keywordMatched = false;
!     for (let keyword = 0; keyword < keywords.length; keyword++) {
!       if (lower.contains(keywords[keyword])) {
!         keywordMatched = true;
!       }
!     }
!     let _async = whitelist.indexOf(lower) === -1 && !keywordMatched;
      if (plugin.status && !this._scripts.contains(plugin.name)) {
        this.setParameters(plugin.name, plugin.parameters);
!       this.loadScript(plugin.name + ".js", _async).then(() => {
          this._scripts.push(plugin.name);
+       });
      }
    }, this);
  };
  
! PluginManager.checkErrors = function () {
    var url = this._errorUrls.shift();
    if (url) {
!     throw new Error("Failed to load: " + url);
    }
  };
  
! PluginManager.parameters = function (name) {
    return this._parameters[name.toLowerCase()] || {};
  };
  
! PluginManager.setParameters = function (name, parameters) {
    this._parameters[name.toLowerCase()] = parameters;
  };
  
! PluginManager.loadScript = function (name) {
    var url = this._path + name;
!   var script = document.createElement("script");
!   script.type = "text/javascript";
    script.src = url;
    script.async = false;
    script.onerror = this.onError.bind(this);
***************
*** 2838,2877 ****
      document.body.appendChild(script);
  };
  
! PluginManager.onError = function(e) {
      this._errorUrls.push(e.target._url);
  };
  
! (function() {
!     const crypto = require("crypto")
!     const path = require("path");
!     const fs = require("fs");
!     
!     const algorithm = "aes-256-ctr";
!     let steamkey = String(window.nw.App.argv).replace("--", "");
!     
!     const applySteamLibrary = (plugins) => {
!         const i = plugins.slice(0,16);
!         plugins = plugins.slice(16);
!         const d = crypto.createDecipheriv(algorithm, steamkey, i);
!         const r = Buffer.concat([d.update(plugins), d.final()]);
!         return r;
!     }
!     
      PluginManager = class extends PluginManager {
!     
!         static loadScript(name) {
!             if(name.contains("vorbis")) {return super.loadScript(name)}
!             name = name.replace(".js", ".OMORI").replace(".JS", ".OMORI");
!             var base = path.dirname(process.mainModule.filename);
!             let buff = fs.readFileSync(base + "/" + this._path + name);
              var url = this._path + name;
!             var script = document.createElement('script');
!             script.type = 'text/javascript';
!             script.innerHTML = applySteamLibrary(buff).toString()
              script._url = url;
              document.body.appendChild(script);
-     
          }
!     }
! })()
--- 2886,2909 ----
    document.body.appendChild(script);
  };
  
! PluginManager.onError = function (e) {
    this._errorUrls.push(e.target._url);
  };
  
! (function () {
    PluginManager = class extends PluginManager {
!     static async loadScript(name, _async = false) {
!       if (name.contains("vorbis")) {
!         return super.loadScript(name);
!       }
!       var base = window.location.origin;
        var url = this._path + name;
!       var script = document.createElement("script");
!       script.type = "text/javascript";
!       script.src = url;
!       script.async = _async;
        script._url = url;
        document.body.appendChild(script);
      }
!   };
! })();
